{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Infecter = void 0;\n\nclass Infecter {\n  constructor(container, particle) {\n    this.container = container;\n    this.particle = particle;\n  }\n\n  startInfection(stage) {\n    const container = this.container;\n    const options = container.options;\n    const stages = options.infection.stages;\n    const stagesCount = stages.length;\n\n    if (stage > stagesCount || stage < 0) {\n      return;\n    }\n\n    this.infectionDelay = 0;\n    this.infectionDelayStage = stage;\n  }\n\n  updateInfectionStage(stage) {\n    const container = this.container;\n    const options = container.options;\n    const stagesCount = options.infection.stages.length;\n\n    if (stage > stagesCount || stage < 0 || this.infectionStage !== undefined && this.infectionStage > stage) {\n      return;\n    }\n\n    this.infectionStage = stage;\n    this.infectionTime = 0;\n  }\n\n  updateInfection(delta) {\n    const options = this.container.options;\n    const infection = options.infection;\n    const stages = options.infection.stages;\n    const stagesCount = stages.length;\n\n    if (this.infectionDelay !== undefined && this.infectionDelayStage !== undefined) {\n      const stage = this.infectionDelayStage;\n\n      if (stage > stagesCount || stage < 0) {\n        return;\n      }\n\n      if (this.infectionDelay > infection.delay * 1000) {\n        this.infectionStage = stage;\n        this.infectionTime = 0;\n        delete this.infectionDelay;\n        delete this.infectionDelayStage;\n      } else {\n        this.infectionDelay += delta;\n      }\n    } else {\n      delete this.infectionDelay;\n      delete this.infectionDelayStage;\n    }\n\n    if (this.infectionStage !== undefined && this.infectionTime !== undefined) {\n      const infectionStage = stages[this.infectionStage];\n\n      if (infectionStage.duration !== undefined && infectionStage.duration >= 0) {\n        if (this.infectionTime > infectionStage.duration * 1000) {\n          this.nextInfectionStage();\n        } else {\n          this.infectionTime += delta;\n        }\n      } else {\n        this.infectionTime += delta;\n      }\n    } else {\n      delete this.infectionStage;\n      delete this.infectionTime;\n    }\n  }\n\n  nextInfectionStage() {\n    const options = this.container.options;\n    const stagesCount = options.infection.stages.length;\n\n    if (stagesCount <= 0 || this.infectionStage === undefined) {\n      return;\n    }\n\n    this.infectionTime = 0;\n\n    if (stagesCount <= ++this.infectionStage) {\n      if (options.infection.cure) {\n        delete this.infectionStage;\n        delete this.infectionTime;\n        return;\n      } else {\n        this.infectionStage = 0;\n        this.infectionTime = 0;\n      }\n    }\n  }\n\n}\n\nexports.Infecter = Infecter;","map":{"version":3,"sources":["/Users/kudy/Desktop/Face-Detectify/node_modules/tsparticles/dist/Core/Particle/Infecter.js"],"names":["Object","defineProperty","exports","value","Infecter","constructor","container","particle","startInfection","stage","options","stages","infection","stagesCount","length","infectionDelay","infectionDelayStage","updateInfectionStage","infectionStage","undefined","infectionTime","updateInfection","delta","delay","duration","nextInfectionStage","cure"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Infecter = void 0;\nclass Infecter {\n    constructor(container, particle) {\n        this.container = container;\n        this.particle = particle;\n    }\n    startInfection(stage) {\n        const container = this.container;\n        const options = container.options;\n        const stages = options.infection.stages;\n        const stagesCount = stages.length;\n        if (stage > stagesCount || stage < 0) {\n            return;\n        }\n        this.infectionDelay = 0;\n        this.infectionDelayStage = stage;\n    }\n    updateInfectionStage(stage) {\n        const container = this.container;\n        const options = container.options;\n        const stagesCount = options.infection.stages.length;\n        if (stage > stagesCount || stage < 0 || (this.infectionStage !== undefined && this.infectionStage > stage)) {\n            return;\n        }\n        this.infectionStage = stage;\n        this.infectionTime = 0;\n    }\n    updateInfection(delta) {\n        const options = this.container.options;\n        const infection = options.infection;\n        const stages = options.infection.stages;\n        const stagesCount = stages.length;\n        if (this.infectionDelay !== undefined && this.infectionDelayStage !== undefined) {\n            const stage = this.infectionDelayStage;\n            if (stage > stagesCount || stage < 0) {\n                return;\n            }\n            if (this.infectionDelay > infection.delay * 1000) {\n                this.infectionStage = stage;\n                this.infectionTime = 0;\n                delete this.infectionDelay;\n                delete this.infectionDelayStage;\n            }\n            else {\n                this.infectionDelay += delta;\n            }\n        }\n        else {\n            delete this.infectionDelay;\n            delete this.infectionDelayStage;\n        }\n        if (this.infectionStage !== undefined && this.infectionTime !== undefined) {\n            const infectionStage = stages[this.infectionStage];\n            if (infectionStage.duration !== undefined && infectionStage.duration >= 0) {\n                if (this.infectionTime > infectionStage.duration * 1000) {\n                    this.nextInfectionStage();\n                }\n                else {\n                    this.infectionTime += delta;\n                }\n            }\n            else {\n                this.infectionTime += delta;\n            }\n        }\n        else {\n            delete this.infectionStage;\n            delete this.infectionTime;\n        }\n    }\n    nextInfectionStage() {\n        const options = this.container.options;\n        const stagesCount = options.infection.stages.length;\n        if (stagesCount <= 0 || this.infectionStage === undefined) {\n            return;\n        }\n        this.infectionTime = 0;\n        if (stagesCount <= ++this.infectionStage) {\n            if (options.infection.cure) {\n                delete this.infectionStage;\n                delete this.infectionTime;\n                return;\n            }\n            else {\n                this.infectionStage = 0;\n                this.infectionTime = 0;\n            }\n        }\n    }\n}\nexports.Infecter = Infecter;\n"]},"metadata":{},"sourceType":"script"}