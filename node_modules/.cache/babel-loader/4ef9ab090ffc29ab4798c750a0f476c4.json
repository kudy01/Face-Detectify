{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CircleWarp = void 0;\n\nconst Rectangle_1 = require(\"./Rectangle\");\n\nconst Circle_1 = require(\"./Circle\");\n\nclass CircleWarp extends Circle_1.Circle {\n  constructor(x, y, radius, canvasSize) {\n    super(x, y, radius);\n    this.canvasSize = canvasSize;\n    this.canvasSize = {\n      height: canvasSize.height,\n      width: canvasSize.width\n    };\n  }\n\n  contains(point) {\n    if (super.contains(point)) {\n      return true;\n    }\n\n    const posNE = {\n      x: point.x - this.canvasSize.width,\n      y: point.y\n    };\n\n    if (super.contains(posNE)) {\n      return true;\n    }\n\n    const posSE = {\n      x: point.x - this.canvasSize.width,\n      y: point.y - this.canvasSize.height\n    };\n\n    if (super.contains(posSE)) {\n      return true;\n    }\n\n    const posSW = {\n      x: point.x,\n      y: point.y - this.canvasSize.height\n    };\n    return super.contains(posSW);\n  }\n\n  intersects(range) {\n    if (super.intersects(range)) {\n      return true;\n    }\n\n    const rect = range;\n    const circle = range;\n    const newPos = {\n      x: range.position.x - this.canvasSize.width,\n      y: range.position.y - this.canvasSize.height\n    };\n\n    if (circle.radius !== undefined) {\n      const biggerCircle = new Circle_1.Circle(newPos.x, newPos.y, circle.radius * 2);\n      return super.intersects(biggerCircle);\n    } else if (rect.size !== undefined) {\n      const rectSW = new Rectangle_1.Rectangle(newPos.x, newPos.y, rect.size.width * 2, rect.size.height * 2);\n      return super.intersects(rectSW);\n    }\n\n    return false;\n  }\n\n}\n\nexports.CircleWarp = CircleWarp;","map":{"version":3,"sources":["/Users/kudy/Desktop/Face-Detectify/node_modules/tsparticles/dist/Utils/CircleWarp.js"],"names":["Object","defineProperty","exports","value","CircleWarp","Rectangle_1","require","Circle_1","Circle","constructor","x","y","radius","canvasSize","height","width","contains","point","posNE","posSE","posSW","intersects","range","rect","circle","newPos","position","undefined","biggerCircle","size","rectSW","Rectangle"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CircleWarp = void 0;\nconst Rectangle_1 = require(\"./Rectangle\");\nconst Circle_1 = require(\"./Circle\");\nclass CircleWarp extends Circle_1.Circle {\n    constructor(x, y, radius, canvasSize) {\n        super(x, y, radius);\n        this.canvasSize = canvasSize;\n        this.canvasSize = {\n            height: canvasSize.height,\n            width: canvasSize.width,\n        };\n    }\n    contains(point) {\n        if (super.contains(point)) {\n            return true;\n        }\n        const posNE = {\n            x: point.x - this.canvasSize.width,\n            y: point.y,\n        };\n        if (super.contains(posNE)) {\n            return true;\n        }\n        const posSE = {\n            x: point.x - this.canvasSize.width,\n            y: point.y - this.canvasSize.height,\n        };\n        if (super.contains(posSE)) {\n            return true;\n        }\n        const posSW = {\n            x: point.x,\n            y: point.y - this.canvasSize.height,\n        };\n        return super.contains(posSW);\n    }\n    intersects(range) {\n        if (super.intersects(range)) {\n            return true;\n        }\n        const rect = range;\n        const circle = range;\n        const newPos = {\n            x: range.position.x - this.canvasSize.width,\n            y: range.position.y - this.canvasSize.height,\n        };\n        if (circle.radius !== undefined) {\n            const biggerCircle = new Circle_1.Circle(newPos.x, newPos.y, circle.radius * 2);\n            return super.intersects(biggerCircle);\n        }\n        else if (rect.size !== undefined) {\n            const rectSW = new Rectangle_1.Rectangle(newPos.x, newPos.y, rect.size.width * 2, rect.size.height * 2);\n            return super.intersects(rectSW);\n        }\n        return false;\n    }\n}\nexports.CircleWarp = CircleWarp;\n"]},"metadata":{},"sourceType":"script"}