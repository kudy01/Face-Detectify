{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PolygonMaskInstance = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst Enums_1 = require(\"./Enums\");\n\nconst Utils_1 = require(\"../../Utils\");\n\nconst PolygonMask_1 = require(\"./Options/Classes/PolygonMask\");\n\nclass PolygonMaskInstance {\n  constructor(container) {\n    this.container = container;\n    this.dimension = {\n      height: 0,\n      width: 0\n    };\n    this.path2DSupported = !!window.Path2D;\n    this.options = new PolygonMask_1.PolygonMask();\n    this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n  }\n\n  static polygonBounce(particle) {\n    particle.velocity.horizontal = particle.velocity.vertical / 2 - particle.velocity.horizontal;\n    particle.velocity.vertical = particle.velocity.horizontal / 2 - particle.velocity.vertical;\n  }\n\n  static drawPolygonMask(context, rawData, stroke) {\n    const color = Utils_1.ColorUtils.colorToRgb(stroke.color);\n\n    if (!color) {\n      return;\n    }\n\n    context.beginPath();\n    context.moveTo(rawData[0].x, rawData[0].y);\n\n    for (const item of rawData) {\n      context.lineTo(item.x, item.y);\n    }\n\n    context.closePath();\n    context.strokeStyle = Utils_1.ColorUtils.getStyleFromRgb(color);\n    context.lineWidth = stroke.width;\n    context.stroke();\n  }\n\n  static drawPolygonMaskPath(context, path, stroke, position) {\n    context.translate(position.x, position.y);\n    const color = Utils_1.ColorUtils.colorToRgb(stroke.color);\n\n    if (!color) {\n      return;\n    }\n\n    context.strokeStyle = Utils_1.ColorUtils.getStyleFromRgb(color, stroke.opacity);\n    context.lineWidth = stroke.width;\n    context.stroke(path);\n  }\n\n  static parsePaths(paths, scale, offset) {\n    const res = [];\n\n    for (const path of paths) {\n      const segments = path.element.pathSegList;\n      const len = segments.numberOfItems;\n      const p = {\n        x: 0,\n        y: 0\n      };\n\n      for (let i = 0; i < len; i++) {\n        const segment = segments.getItem(i);\n        const svgPathSeg = window.SVGPathSeg;\n\n        switch (segment.pathSegType) {\n          case svgPathSeg.PATHSEG_MOVETO_ABS:\n          case svgPathSeg.PATHSEG_LINETO_ABS:\n          case svgPathSeg.PATHSEG_CURVETO_CUBIC_ABS:\n          case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:\n          case svgPathSeg.PATHSEG_ARC_ABS:\n          case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:\n          case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:\n            {\n              const absSeg = segment;\n              p.x = absSeg.x;\n              p.y = absSeg.y;\n              break;\n            }\n\n          case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:\n            p.x = segment.x;\n            break;\n\n          case svgPathSeg.PATHSEG_LINETO_VERTICAL_ABS:\n            p.y = segment.y;\n            break;\n\n          case svgPathSeg.PATHSEG_LINETO_REL:\n          case svgPathSeg.PATHSEG_MOVETO_REL:\n          case svgPathSeg.PATHSEG_CURVETO_CUBIC_REL:\n          case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:\n          case svgPathSeg.PATHSEG_ARC_REL:\n          case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:\n          case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:\n            {\n              const relSeg = segment;\n              p.x += relSeg.x;\n              p.y += relSeg.y;\n              break;\n            }\n\n          case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:\n            p.x += segment.x;\n            break;\n\n          case svgPathSeg.PATHSEG_LINETO_VERTICAL_REL:\n            p.y += segment.y;\n            break;\n\n          case svgPathSeg.PATHSEG_UNKNOWN:\n          case svgPathSeg.PATHSEG_CLOSEPATH:\n            continue;\n        }\n\n        res.push({\n          x: p.x * scale + offset.x,\n          y: p.y * scale + offset.y\n        });\n      }\n    }\n\n    return res;\n  }\n\n  initAsync(options) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n      const polygonMaskOptions = this.options;\n      this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n\n      if (polygonMaskOptions.enable) {\n        yield this.initRawData();\n      }\n    });\n  }\n\n  resize() {\n    const container = this.container;\n    const options = this.options;\n\n    if (!(options.enable && options.type !== Enums_1.Type.none)) {\n      return;\n    }\n\n    if (this.redrawTimeout) {\n      clearTimeout(this.redrawTimeout);\n    }\n\n    this.redrawTimeout = window.setTimeout(() => tslib_1.__awaiter(this, void 0, void 0, function* () {\n      yield this.initRawData(true);\n      container.particles.redraw();\n    }), 250);\n  }\n\n  stop() {\n    delete this.raw;\n    delete this.paths;\n  }\n\n  particlesInitialization() {\n    const options = this.options;\n\n    if (options.enable && options.type === Enums_1.Type.inline && (options.inline.arrangement === Enums_1.InlineArrangement.onePerPoint || options.inline.arrangement === Enums_1.InlineArrangement.perPoint)) {\n      this.drawPoints();\n      return true;\n    }\n\n    return false;\n  }\n\n  particlePosition(position, particle) {\n    var _a, _b;\n\n    const options = this.options;\n\n    if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n      return;\n    }\n\n    const pos = Utils_1.Utils.deepExtend({}, position ? position : this.randomPoint());\n\n    if (options.type === Enums_1.Type.inline && particle) {\n      particle.initialPosition = pos;\n    }\n\n    return pos;\n  }\n\n  particleBounce(particle) {\n    const options = this.options;\n\n    if (options.enable && options.type !== Enums_1.Type.none && options.type !== Enums_1.Type.inline) {\n      if (!this.checkInsidePolygon(particle.getPosition())) {\n        PolygonMaskInstance.polygonBounce(particle);\n        return true;\n      }\n    } else if (options.enable && options.type === Enums_1.Type.inline && particle.initialPosition) {\n      const dist = Utils_1.Utils.getDistance(particle.initialPosition, particle.getPosition());\n\n      if (dist > this.polygonMaskMoveRadius) {\n        PolygonMaskInstance.polygonBounce(particle);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  clickPositionValid(position) {\n    const options = this.options;\n    return options.enable && options.type !== Enums_1.Type.none && options.type !== Enums_1.Type.inline && this.checkInsidePolygon(position);\n  }\n\n  draw(context) {\n    var _a;\n\n    if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n      return;\n    }\n\n    const options = this.options;\n    const polygonDraw = options.draw;\n\n    if (!(options.enable && polygonDraw.enable)) {\n      return;\n    }\n\n    const rawData = this.raw;\n\n    for (const path of this.paths) {\n      const path2d = path.path2d;\n      const path2dSupported = this.path2DSupported;\n\n      if (!context) {\n        continue;\n      }\n\n      if (path2dSupported && path2d && this.offset) {\n        PolygonMaskInstance.drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n      } else if (rawData) {\n        PolygonMaskInstance.drawPolygonMask(context, rawData, polygonDraw.stroke);\n      }\n    }\n  }\n\n  checkInsidePolygon(position) {\n    var _a, _b;\n\n    const container = this.container;\n    const options = this.options;\n\n    if (!options.enable || options.type === Enums_1.Type.none || options.type === Enums_1.Type.inline) {\n      return true;\n    }\n\n    if (!this.raw) {\n      throw new Error(Utils_1.Constants.noPolygonFound);\n    }\n\n    const canvasSize = container.canvas.size;\n    const x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width;\n    const y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n    let inside = false;\n\n    for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n      const pi = this.raw[i];\n      const pj = this.raw[j];\n      const intersect = pi.y > y !== pj.y > y && x < (pj.x - pi.x) * (y - pi.y) / (pj.y - pi.y) + pi.x;\n\n      if (intersect) {\n        inside = !inside;\n      }\n    }\n\n    return options.type === Enums_1.Type.inside ? inside : options.type === Enums_1.Type.outside ? !inside : false;\n  }\n\n  parseSvgPath(xml, force) {\n    var _a, _b, _c;\n\n    const forceDownload = force !== null && force !== void 0 ? force : false;\n\n    if (this.paths !== undefined && !forceDownload) {\n      return this.raw;\n    }\n\n    const container = this.container;\n    const options = this.options;\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(xml, \"image/svg+xml\");\n    const svg = doc.getElementsByTagName(\"svg\")[0];\n    let svgPaths = svg.getElementsByTagName(\"path\");\n\n    if (!svgPaths.length) {\n      svgPaths = doc.getElementsByTagName(\"path\");\n    }\n\n    this.paths = [];\n\n    for (let i = 0; i < svgPaths.length; i++) {\n      const path = svgPaths.item(i);\n\n      if (path) {\n        this.paths.push({\n          element: path,\n          length: path.getTotalLength()\n        });\n      }\n    }\n\n    const pxRatio = container.retina.pixelRatio;\n    const scale = options.scale / pxRatio;\n    this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n    this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n    const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n      x: 50,\n      y: 50\n    };\n    this.offset = {\n      x: container.canvas.size.width * position.x / (100 * pxRatio) - this.dimension.width / 2,\n      y: container.canvas.size.height * position.y / (100 * pxRatio) - this.dimension.height / 2\n    };\n    return PolygonMaskInstance.parsePaths(this.paths, scale, this.offset);\n  }\n\n  downloadSvgPath(svgUrl, force) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const options = this.options;\n      const url = svgUrl || options.url;\n      const forceDownload = force !== null && force !== void 0 ? force : false;\n\n      if (!url || this.paths !== undefined && !forceDownload) {\n        return this.raw;\n      }\n\n      const req = yield fetch(url);\n\n      if (!req.ok) {\n        throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n      }\n\n      return this.parseSvgPath(yield req.text(), force);\n    });\n  }\n\n  drawPoints() {\n    if (!this.raw) {\n      return;\n    }\n\n    for (const item of this.raw) {\n      this.container.particles.addParticle({\n        x: item.x,\n        y: item.y\n      });\n    }\n  }\n\n  randomPoint() {\n    const container = this.container;\n    const options = this.options;\n    let position;\n\n    if (options.type === Enums_1.Type.inline) {\n      switch (options.inline.arrangement) {\n        case Enums_1.InlineArrangement.randomPoint:\n          position = this.getRandomPoint();\n          break;\n\n        case Enums_1.InlineArrangement.randomLength:\n          position = this.getRandomPointByLength();\n          break;\n\n        case Enums_1.InlineArrangement.equidistant:\n          position = this.getEquidistantPointByIndex(container.particles.count);\n          break;\n\n        case Enums_1.InlineArrangement.onePerPoint:\n        case Enums_1.InlineArrangement.perPoint:\n        default:\n          position = this.getPointByIndex(container.particles.count);\n      }\n    } else {\n      position = {\n        x: Math.random() * container.canvas.size.width,\n        y: Math.random() * container.canvas.size.height\n      };\n    }\n\n    if (this.checkInsidePolygon(position)) {\n      return position;\n    } else {\n      return this.randomPoint();\n    }\n  }\n\n  getRandomPoint() {\n    if (!this.raw || !this.raw.length) {\n      throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n    }\n\n    const coords = Utils_1.Utils.itemFromArray(this.raw);\n    return {\n      x: coords.x,\n      y: coords.y\n    };\n  }\n\n  getRandomPointByLength() {\n    var _a, _b, _c;\n\n    const options = this.options;\n\n    if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n      throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n    }\n\n    const path = Utils_1.Utils.itemFromArray(this.paths);\n    const distance = Math.floor(Math.random() * path.length) + 1;\n    const point = path.element.getPointAtLength(distance);\n    return {\n      x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n      y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0)\n    };\n  }\n\n  getEquidistantPointByIndex(index) {\n    var _a, _b, _c, _d, _e, _f, _g;\n\n    const options = this.container.options;\n    const polygonMaskOptions = this.options;\n    if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n    let offset = 0;\n    let point;\n    const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0);\n    const distance = totalLength / options.particles.number.value;\n\n    for (const path of this.paths) {\n      const pathDistance = distance * index - offset;\n\n      if (pathDistance <= path.length) {\n        point = path.element.getPointAtLength(pathDistance);\n        break;\n      } else {\n        offset += path.length;\n      }\n    }\n\n    return {\n      x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n      y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0)\n    };\n  }\n\n  getPointByIndex(index) {\n    if (!this.raw || !this.raw.length) {\n      throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n    }\n\n    const coords = this.raw[index % this.raw.length];\n    return {\n      x: coords.x,\n      y: coords.y\n    };\n  }\n\n  createPath2D() {\n    var _a, _b;\n\n    const options = this.options;\n\n    if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n      return;\n    }\n\n    for (const path of this.paths) {\n      const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n\n      if (pathData) {\n        const path2d = new Path2D(pathData);\n        const matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix();\n        const finalPath = new Path2D();\n        const transform = matrix.scale(options.scale);\n\n        if (finalPath.addPath) {\n          finalPath.addPath(path2d, transform);\n          path.path2d = finalPath;\n        } else {\n          delete path.path2d;\n        }\n      } else {\n        delete path.path2d;\n      }\n\n      if (path.path2d || !this.raw) {\n        continue;\n      }\n\n      path.path2d = new Path2D();\n      path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\n      this.raw.forEach((pos, i) => {\n        var _a;\n\n        if (i > 0) {\n          (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n        }\n      });\n      path.path2d.closePath();\n    }\n  }\n\n  initRawData(force) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const options = this.options;\n\n      if (options.url) {\n        this.raw = yield this.downloadSvgPath(options.url, force);\n      } else if (options.data) {\n        const data = options.data;\n        let svg;\n\n        if (typeof data !== \"string\") {\n          const path = data.path instanceof Array ? data.path.map(t => `<path d=\"${t}\" />`).join(\"\") : `<path d=\"${data.path}\" />`;\n          const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n          svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\n        } else {\n          svg = data;\n        }\n\n        this.raw = this.parseSvgPath(svg, force);\n      }\n\n      this.createPath2D();\n    });\n  }\n\n}\n\nexports.PolygonMaskInstance = PolygonMaskInstance;","map":{"version":3,"sources":["/Users/kudy/Desktop/Face-Detectify/node_modules/tsparticles/dist/Plugins/PolygonMask/PolygonMaskInstance.js"],"names":["Object","defineProperty","exports","value","PolygonMaskInstance","tslib_1","require","Enums_1","Utils_1","PolygonMask_1","constructor","container","dimension","height","width","path2DSupported","window","Path2D","options","PolygonMask","polygonMaskMoveRadius","move","radius","retina","pixelRatio","polygonBounce","particle","velocity","horizontal","vertical","drawPolygonMask","context","rawData","stroke","color","ColorUtils","colorToRgb","beginPath","moveTo","x","y","item","lineTo","closePath","strokeStyle","getStyleFromRgb","lineWidth","drawPolygonMaskPath","path","position","translate","opacity","parsePaths","paths","scale","offset","res","segments","element","pathSegList","len","numberOfItems","p","i","segment","getItem","svgPathSeg","SVGPathSeg","pathSegType","PATHSEG_MOVETO_ABS","PATHSEG_LINETO_ABS","PATHSEG_CURVETO_CUBIC_ABS","PATHSEG_CURVETO_QUADRATIC_ABS","PATHSEG_ARC_ABS","PATHSEG_CURVETO_CUBIC_SMOOTH_ABS","PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS","absSeg","PATHSEG_LINETO_HORIZONTAL_ABS","PATHSEG_LINETO_VERTICAL_ABS","PATHSEG_LINETO_REL","PATHSEG_MOVETO_REL","PATHSEG_CURVETO_CUBIC_REL","PATHSEG_CURVETO_QUADRATIC_REL","PATHSEG_ARC_REL","PATHSEG_CURVETO_CUBIC_SMOOTH_REL","PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL","relSeg","PATHSEG_LINETO_HORIZONTAL_REL","PATHSEG_LINETO_VERTICAL_REL","PATHSEG_UNKNOWN","PATHSEG_CLOSEPATH","push","initAsync","__awaiter","load","polygon","polygonMaskOptions","enable","initRawData","resize","type","Type","none","redrawTimeout","clearTimeout","setTimeout","particles","redraw","stop","raw","particlesInitialization","inline","arrangement","InlineArrangement","onePerPoint","perPoint","drawPoints","particlePosition","_a","_b","length","pos","Utils","deepExtend","randomPoint","initialPosition","particleBounce","checkInsidePolygon","getPosition","dist","getDistance","clickPositionValid","draw","polygonDraw","path2d","path2dSupported","Error","Constants","noPolygonFound","canvasSize","canvas","size","Math","random","inside","j","pi","pj","intersect","outside","parseSvgPath","xml","force","_c","forceDownload","undefined","parser","DOMParser","doc","parseFromString","svg","getElementsByTagName","svgPaths","getTotalLength","pxRatio","parseFloat","getAttribute","downloadSvgPath","svgUrl","url","req","fetch","ok","text","addParticle","getRandomPoint","randomLength","getRandomPointByLength","equidistant","getEquidistantPointByIndex","count","getPointByIndex","noPolygonDataLoaded","coords","itemFromArray","distance","floor","point","getPointAtLength","index","_d","_e","_f","_g","totalLength","reduce","tot","number","pathDistance","createPath2D","pathData","matrix","document","createElementNS","createSVGMatrix","finalPath","transform","addPath","forEach","data","Array","map","t","join","namespaces"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PolygonMaskInstance = void 0;\nconst tslib_1 = require(\"tslib\");\nconst Enums_1 = require(\"./Enums\");\nconst Utils_1 = require(\"../../Utils\");\nconst PolygonMask_1 = require(\"./Options/Classes/PolygonMask\");\nclass PolygonMaskInstance {\n    constructor(container) {\n        this.container = container;\n        this.dimension = {\n            height: 0,\n            width: 0,\n        };\n        this.path2DSupported = !!window.Path2D;\n        this.options = new PolygonMask_1.PolygonMask();\n        this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n    }\n    static polygonBounce(particle) {\n        particle.velocity.horizontal = particle.velocity.vertical / 2 - particle.velocity.horizontal;\n        particle.velocity.vertical = particle.velocity.horizontal / 2 - particle.velocity.vertical;\n    }\n    static drawPolygonMask(context, rawData, stroke) {\n        const color = Utils_1.ColorUtils.colorToRgb(stroke.color);\n        if (!color) {\n            return;\n        }\n        context.beginPath();\n        context.moveTo(rawData[0].x, rawData[0].y);\n        for (const item of rawData) {\n            context.lineTo(item.x, item.y);\n        }\n        context.closePath();\n        context.strokeStyle = Utils_1.ColorUtils.getStyleFromRgb(color);\n        context.lineWidth = stroke.width;\n        context.stroke();\n    }\n    static drawPolygonMaskPath(context, path, stroke, position) {\n        context.translate(position.x, position.y);\n        const color = Utils_1.ColorUtils.colorToRgb(stroke.color);\n        if (!color) {\n            return;\n        }\n        context.strokeStyle = Utils_1.ColorUtils.getStyleFromRgb(color, stroke.opacity);\n        context.lineWidth = stroke.width;\n        context.stroke(path);\n    }\n    static parsePaths(paths, scale, offset) {\n        const res = [];\n        for (const path of paths) {\n            const segments = path.element.pathSegList;\n            const len = segments.numberOfItems;\n            const p = {\n                x: 0,\n                y: 0,\n            };\n            for (let i = 0; i < len; i++) {\n                const segment = segments.getItem(i);\n                const svgPathSeg = window.SVGPathSeg;\n                switch (segment.pathSegType) {\n                    case svgPathSeg.PATHSEG_MOVETO_ABS:\n                    case svgPathSeg.PATHSEG_LINETO_ABS:\n                    case svgPathSeg.PATHSEG_CURVETO_CUBIC_ABS:\n                    case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:\n                    case svgPathSeg.PATHSEG_ARC_ABS:\n                    case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:\n                    case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS: {\n                        const absSeg = segment;\n                        p.x = absSeg.x;\n                        p.y = absSeg.y;\n                        break;\n                    }\n                    case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:\n                        p.x = segment.x;\n                        break;\n                    case svgPathSeg.PATHSEG_LINETO_VERTICAL_ABS:\n                        p.y = segment.y;\n                        break;\n                    case svgPathSeg.PATHSEG_LINETO_REL:\n                    case svgPathSeg.PATHSEG_MOVETO_REL:\n                    case svgPathSeg.PATHSEG_CURVETO_CUBIC_REL:\n                    case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:\n                    case svgPathSeg.PATHSEG_ARC_REL:\n                    case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:\n                    case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL: {\n                        const relSeg = segment;\n                        p.x += relSeg.x;\n                        p.y += relSeg.y;\n                        break;\n                    }\n                    case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:\n                        p.x += segment.x;\n                        break;\n                    case svgPathSeg.PATHSEG_LINETO_VERTICAL_REL:\n                        p.y += segment.y;\n                        break;\n                    case svgPathSeg.PATHSEG_UNKNOWN:\n                    case svgPathSeg.PATHSEG_CLOSEPATH:\n                        continue;\n                }\n                res.push({\n                    x: p.x * scale + offset.x,\n                    y: p.y * scale + offset.y,\n                });\n            }\n        }\n        return res;\n    }\n    initAsync(options) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n            const polygonMaskOptions = this.options;\n            this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n            if (polygonMaskOptions.enable) {\n                yield this.initRawData();\n            }\n        });\n    }\n    resize() {\n        const container = this.container;\n        const options = this.options;\n        if (!(options.enable && options.type !== Enums_1.Type.none)) {\n            return;\n        }\n        if (this.redrawTimeout) {\n            clearTimeout(this.redrawTimeout);\n        }\n        this.redrawTimeout = window.setTimeout(() => tslib_1.__awaiter(this, void 0, void 0, function* () {\n            yield this.initRawData(true);\n            container.particles.redraw();\n        }), 250);\n    }\n    stop() {\n        delete this.raw;\n        delete this.paths;\n    }\n    particlesInitialization() {\n        const options = this.options;\n        if (options.enable &&\n            options.type === Enums_1.Type.inline &&\n            (options.inline.arrangement === Enums_1.InlineArrangement.onePerPoint ||\n                options.inline.arrangement === Enums_1.InlineArrangement.perPoint)) {\n            this.drawPoints();\n            return true;\n        }\n        return false;\n    }\n    particlePosition(position, particle) {\n        var _a, _b;\n        const options = this.options;\n        if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n            return;\n        }\n        const pos = Utils_1.Utils.deepExtend({}, position ? position : this.randomPoint());\n        if (options.type === Enums_1.Type.inline && particle) {\n            particle.initialPosition = pos;\n        }\n        return pos;\n    }\n    particleBounce(particle) {\n        const options = this.options;\n        if (options.enable && options.type !== Enums_1.Type.none && options.type !== Enums_1.Type.inline) {\n            if (!this.checkInsidePolygon(particle.getPosition())) {\n                PolygonMaskInstance.polygonBounce(particle);\n                return true;\n            }\n        }\n        else if (options.enable && options.type === Enums_1.Type.inline && particle.initialPosition) {\n            const dist = Utils_1.Utils.getDistance(particle.initialPosition, particle.getPosition());\n            if (dist > this.polygonMaskMoveRadius) {\n                PolygonMaskInstance.polygonBounce(particle);\n                return true;\n            }\n        }\n        return false;\n    }\n    clickPositionValid(position) {\n        const options = this.options;\n        return (options.enable &&\n            options.type !== Enums_1.Type.none &&\n            options.type !== Enums_1.Type.inline &&\n            this.checkInsidePolygon(position));\n    }\n    draw(context) {\n        var _a;\n        if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        const options = this.options;\n        const polygonDraw = options.draw;\n        if (!(options.enable && polygonDraw.enable)) {\n            return;\n        }\n        const rawData = this.raw;\n        for (const path of this.paths) {\n            const path2d = path.path2d;\n            const path2dSupported = this.path2DSupported;\n            if (!context) {\n                continue;\n            }\n            if (path2dSupported && path2d && this.offset) {\n                PolygonMaskInstance.drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n            }\n            else if (rawData) {\n                PolygonMaskInstance.drawPolygonMask(context, rawData, polygonDraw.stroke);\n            }\n        }\n    }\n    checkInsidePolygon(position) {\n        var _a, _b;\n        const container = this.container;\n        const options = this.options;\n        if (!options.enable || options.type === Enums_1.Type.none || options.type === Enums_1.Type.inline) {\n            return true;\n        }\n        if (!this.raw) {\n            throw new Error(Utils_1.Constants.noPolygonFound);\n        }\n        const canvasSize = container.canvas.size;\n        const x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width;\n        const y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n        let inside = false;\n        for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n            const pi = this.raw[i];\n            const pj = this.raw[j];\n            const intersect = pi.y > y !== pj.y > y && x < ((pj.x - pi.x) * (y - pi.y)) / (pj.y - pi.y) + pi.x;\n            if (intersect) {\n                inside = !inside;\n            }\n        }\n        return options.type === Enums_1.Type.inside ? inside : options.type === Enums_1.Type.outside ? !inside : false;\n    }\n    parseSvgPath(xml, force) {\n        var _a, _b, _c;\n        const forceDownload = force !== null && force !== void 0 ? force : false;\n        if (this.paths !== undefined && !forceDownload) {\n            return this.raw;\n        }\n        const container = this.container;\n        const options = this.options;\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(xml, \"image/svg+xml\");\n        const svg = doc.getElementsByTagName(\"svg\")[0];\n        let svgPaths = svg.getElementsByTagName(\"path\");\n        if (!svgPaths.length) {\n            svgPaths = doc.getElementsByTagName(\"path\");\n        }\n        this.paths = [];\n        for (let i = 0; i < svgPaths.length; i++) {\n            const path = svgPaths.item(i);\n            if (path) {\n                this.paths.push({\n                    element: path,\n                    length: path.getTotalLength(),\n                });\n            }\n        }\n        const pxRatio = container.retina.pixelRatio;\n        const scale = options.scale / pxRatio;\n        this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n        this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n        const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n            x: 50,\n            y: 50,\n        };\n        this.offset = {\n            x: (container.canvas.size.width * position.x) / (100 * pxRatio) - this.dimension.width / 2,\n            y: (container.canvas.size.height * position.y) / (100 * pxRatio) - this.dimension.height / 2,\n        };\n        return PolygonMaskInstance.parsePaths(this.paths, scale, this.offset);\n    }\n    downloadSvgPath(svgUrl, force) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const options = this.options;\n            const url = svgUrl || options.url;\n            const forceDownload = force !== null && force !== void 0 ? force : false;\n            if (!url || (this.paths !== undefined && !forceDownload)) {\n                return this.raw;\n            }\n            const req = yield fetch(url);\n            if (!req.ok) {\n                throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n            }\n            return this.parseSvgPath(yield req.text(), force);\n        });\n    }\n    drawPoints() {\n        if (!this.raw) {\n            return;\n        }\n        for (const item of this.raw) {\n            this.container.particles.addParticle({\n                x: item.x,\n                y: item.y,\n            });\n        }\n    }\n    randomPoint() {\n        const container = this.container;\n        const options = this.options;\n        let position;\n        if (options.type === Enums_1.Type.inline) {\n            switch (options.inline.arrangement) {\n                case Enums_1.InlineArrangement.randomPoint:\n                    position = this.getRandomPoint();\n                    break;\n                case Enums_1.InlineArrangement.randomLength:\n                    position = this.getRandomPointByLength();\n                    break;\n                case Enums_1.InlineArrangement.equidistant:\n                    position = this.getEquidistantPointByIndex(container.particles.count);\n                    break;\n                case Enums_1.InlineArrangement.onePerPoint:\n                case Enums_1.InlineArrangement.perPoint:\n                default:\n                    position = this.getPointByIndex(container.particles.count);\n            }\n        }\n        else {\n            position = {\n                x: Math.random() * container.canvas.size.width,\n                y: Math.random() * container.canvas.size.height,\n            };\n        }\n        if (this.checkInsidePolygon(position)) {\n            return position;\n        }\n        else {\n            return this.randomPoint();\n        }\n    }\n    getRandomPoint() {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n        }\n        const coords = Utils_1.Utils.itemFromArray(this.raw);\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    getRandomPointByLength() {\n        var _a, _b, _c;\n        const options = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n        }\n        const path = Utils_1.Utils.itemFromArray(this.paths);\n        const distance = Math.floor(Math.random() * path.length) + 1;\n        const point = path.element.getPointAtLength(distance);\n        return {\n            x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n            y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0),\n        };\n    }\n    getEquidistantPointByIndex(index) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const options = this.container.options;\n        const polygonMaskOptions = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length))\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n        let offset = 0;\n        let point;\n        const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0);\n        const distance = totalLength / options.particles.number.value;\n        for (const path of this.paths) {\n            const pathDistance = distance * index - offset;\n            if (pathDistance <= path.length) {\n                point = path.element.getPointAtLength(pathDistance);\n                break;\n            }\n            else {\n                offset += path.length;\n            }\n        }\n        return {\n            x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n            y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0),\n        };\n    }\n    getPointByIndex(index) {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n        }\n        const coords = this.raw[index % this.raw.length];\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    createPath2D() {\n        var _a, _b;\n        const options = this.options;\n        if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        for (const path of this.paths) {\n            const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n            if (pathData) {\n                const path2d = new Path2D(pathData);\n                const matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix();\n                const finalPath = new Path2D();\n                const transform = matrix.scale(options.scale);\n                if (finalPath.addPath) {\n                    finalPath.addPath(path2d, transform);\n                    path.path2d = finalPath;\n                }\n                else {\n                    delete path.path2d;\n                }\n            }\n            else {\n                delete path.path2d;\n            }\n            if (path.path2d || !this.raw) {\n                continue;\n            }\n            path.path2d = new Path2D();\n            path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\n            this.raw.forEach((pos, i) => {\n                var _a;\n                if (i > 0) {\n                    (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n                }\n            });\n            path.path2d.closePath();\n        }\n    }\n    initRawData(force) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const options = this.options;\n            if (options.url) {\n                this.raw = yield this.downloadSvgPath(options.url, force);\n            }\n            else if (options.data) {\n                const data = options.data;\n                let svg;\n                if (typeof data !== \"string\") {\n                    const path = data.path instanceof Array\n                        ? data.path.map((t) => `<path d=\"${t}\" />`).join(\"\")\n                        : `<path d=\"${data.path}\" />`;\n                    const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                    svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\n                }\n                else {\n                    svg = data;\n                }\n                this.raw = this.parseSvgPath(svg, force);\n            }\n            this.createPath2D();\n        });\n    }\n}\nexports.PolygonMaskInstance = PolygonMaskInstance;\n"]},"metadata":{},"sourceType":"script"}