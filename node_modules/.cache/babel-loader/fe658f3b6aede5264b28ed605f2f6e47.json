{"ast":null,"code":"(function (module) {\n  'use strict';\n\n  module.exports.is_uri = is_iri;\n  module.exports.is_http_uri = is_http_iri;\n  module.exports.is_https_uri = is_https_iri;\n  module.exports.is_web_uri = is_web_iri; // Create aliases\n\n  module.exports.isUri = is_iri;\n  module.exports.isHttpUri = is_http_iri;\n  module.exports.isHttpsUri = is_https_iri;\n  module.exports.isWebUri = is_web_iri; // private function\n  // internal URI spitter method - direct from RFC 3986\n\n  var splitUri = function (uri) {\n    var splitted = uri.match(/(?:([^:\\/?#]+):)?(?:\\/\\/([^\\/?#]*))?([^?#]*)(?:\\?([^#]*))?(?:#(.*))?/);\n    return splitted;\n  };\n\n  function is_iri(value) {\n    if (!value) {\n      return;\n    } // check for illegal characters\n\n\n    if (/[^a-z0-9\\:\\/\\?\\#\\[\\]\\@\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=\\.\\-\\_\\~\\%]/i.test(value)) return; // check for hex escapes that aren't complete\n\n    if (/%[^0-9a-f]/i.test(value)) return;\n    if (/%[0-9a-f](:?[^0-9a-f]|$)/i.test(value)) return;\n    var splitted = [];\n    var scheme = '';\n    var authority = '';\n    var path = '';\n    var query = '';\n    var fragment = '';\n    var out = ''; // from RFC 3986\n\n    splitted = splitUri(value);\n    scheme = splitted[1];\n    authority = splitted[2];\n    path = splitted[3];\n    query = splitted[4];\n    fragment = splitted[5]; // scheme and path are required, though the path can be empty\n\n    if (!(scheme && scheme.length && path.length >= 0)) return; // if authority is present, the path must be empty or begin with a /\n\n    if (authority && authority.length) {\n      if (!(path.length === 0 || /^\\//.test(path))) return;\n    } else {\n      // if authority is not present, the path must not start with //\n      if (/^\\/\\//.test(path)) return;\n    } // scheme must begin with a letter, then consist of letters, digits, +, ., or -\n\n\n    if (!/^[a-z][a-z0-9\\+\\-\\.]*$/.test(scheme.toLowerCase())) return; // re-assemble the URL per section 5.3 in RFC 3986\n\n    out += scheme + ':';\n\n    if (authority && authority.length) {\n      out += '//' + authority;\n    }\n\n    out += path;\n\n    if (query && query.length) {\n      out += '?' + query;\n    }\n\n    if (fragment && fragment.length) {\n      out += '#' + fragment;\n    }\n\n    return out;\n  }\n\n  function is_http_iri(value, allowHttps) {\n    if (!is_iri(value)) {\n      return;\n    }\n\n    var splitted = [];\n    var scheme = '';\n    var authority = '';\n    var path = '';\n    var port = '';\n    var query = '';\n    var fragment = '';\n    var out = ''; // from RFC 3986\n\n    splitted = splitUri(value);\n    scheme = splitted[1];\n    authority = splitted[2];\n    path = splitted[3];\n    query = splitted[4];\n    fragment = splitted[5];\n    if (!scheme) return;\n\n    if (allowHttps) {\n      if (scheme.toLowerCase() != 'https') return;\n    } else {\n      if (scheme.toLowerCase() != 'http') return;\n    } // fully-qualified URIs must have an authority section that is\n    // a valid host\n\n\n    if (!authority) {\n      return;\n    } // enable port component\n\n\n    if (/:(\\d+)$/.test(authority)) {\n      port = authority.match(/:(\\d+)$/)[0];\n      authority = authority.replace(/:\\d+$/, '');\n    }\n\n    out += scheme + ':';\n    out += '//' + authority;\n\n    if (port) {\n      out += port;\n    }\n\n    out += path;\n\n    if (query && query.length) {\n      out += '?' + query;\n    }\n\n    if (fragment && fragment.length) {\n      out += '#' + fragment;\n    }\n\n    return out;\n  }\n\n  function is_https_iri(value) {\n    return is_http_iri(value, true);\n  }\n\n  function is_web_iri(value) {\n    return is_http_iri(value) || is_https_iri(value);\n  }\n})(module);","map":{"version":3,"sources":["/Users/kudy/Desktop/Face-Detectify/node_modules/valid-url/index.js"],"names":["module","exports","is_uri","is_iri","is_http_uri","is_http_iri","is_https_uri","is_https_iri","is_web_uri","is_web_iri","isUri","isHttpUri","isHttpsUri","isWebUri","splitUri","uri","splitted","match","value","test","scheme","authority","path","query","fragment","out","length","toLowerCase","allowHttps","port","replace"],"mappings":"AAAA,CAAC,UAASA,MAAT,EAAiB;AACd;;AAEAA,EAAAA,MAAM,CAACC,OAAP,CAAeC,MAAf,GAAwBC,MAAxB;AACAH,EAAAA,MAAM,CAACC,OAAP,CAAeG,WAAf,GAA6BC,WAA7B;AACAL,EAAAA,MAAM,CAACC,OAAP,CAAeK,YAAf,GAA8BC,YAA9B;AACAP,EAAAA,MAAM,CAACC,OAAP,CAAeO,UAAf,GAA4BC,UAA5B,CANc,CAOd;;AACAT,EAAAA,MAAM,CAACC,OAAP,CAAeS,KAAf,GAAuBP,MAAvB;AACAH,EAAAA,MAAM,CAACC,OAAP,CAAeU,SAAf,GAA2BN,WAA3B;AACAL,EAAAA,MAAM,CAACC,OAAP,CAAeW,UAAf,GAA4BL,YAA5B;AACAP,EAAAA,MAAM,CAACC,OAAP,CAAeY,QAAf,GAA0BJ,UAA1B,CAXc,CAcd;AACA;;AACA,MAAIK,QAAQ,GAAG,UAASC,GAAT,EAAc;AACzB,QAAIC,QAAQ,GAAGD,GAAG,CAACE,KAAJ,CAAU,sEAAV,CAAf;AACA,WAAOD,QAAP;AACH,GAHD;;AAKA,WAASb,MAAT,CAAgBe,KAAhB,EAAuB;AACnB,QAAI,CAACA,KAAL,EAAY;AACR;AACH,KAHkB,CAKnB;;;AACA,QAAI,2DAA2DC,IAA3D,CAAgED,KAAhE,CAAJ,EAA4E,OANzD,CAQnB;;AACA,QAAI,cAAcC,IAAd,CAAmBD,KAAnB,CAAJ,EAA+B;AAC/B,QAAI,4BAA4BC,IAA5B,CAAiCD,KAAjC,CAAJ,EAA6C;AAE7C,QAAIF,QAAQ,GAAG,EAAf;AACA,QAAII,MAAM,GAAG,EAAb;AACA,QAAIC,SAAS,GAAG,EAAhB;AACA,QAAIC,IAAI,GAAG,EAAX;AACA,QAAIC,KAAK,GAAG,EAAZ;AACA,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,GAAG,GAAG,EAAV,CAlBmB,CAoBnB;;AACAT,IAAAA,QAAQ,GAAGF,QAAQ,CAACI,KAAD,CAAnB;AACAE,IAAAA,MAAM,GAAGJ,QAAQ,CAAC,CAAD,CAAjB;AACAK,IAAAA,SAAS,GAAGL,QAAQ,CAAC,CAAD,CAApB;AACAM,IAAAA,IAAI,GAAGN,QAAQ,CAAC,CAAD,CAAf;AACAO,IAAAA,KAAK,GAAGP,QAAQ,CAAC,CAAD,CAAhB;AACAQ,IAAAA,QAAQ,GAAGR,QAAQ,CAAC,CAAD,CAAnB,CA1BmB,CA4BnB;;AACA,QAAI,EAAEI,MAAM,IAAIA,MAAM,CAACM,MAAjB,IAA2BJ,IAAI,CAACI,MAAL,IAAe,CAA5C,CAAJ,EAAoD,OA7BjC,CA+BnB;;AACA,QAAIL,SAAS,IAAIA,SAAS,CAACK,MAA3B,EAAmC;AAC/B,UAAI,EAAEJ,IAAI,CAACI,MAAL,KAAgB,CAAhB,IAAqB,MAAMP,IAAN,CAAWG,IAAX,CAAvB,CAAJ,EAA8C;AACjD,KAFD,MAEO;AACH;AACA,UAAI,QAAQH,IAAR,CAAaG,IAAb,CAAJ,EAAwB;AAC3B,KArCkB,CAuCnB;;;AACA,QAAI,CAAC,yBAAyBH,IAAzB,CAA8BC,MAAM,CAACO,WAAP,EAA9B,CAAL,EAA2D,OAxCxC,CA0CnB;;AACAF,IAAAA,GAAG,IAAIL,MAAM,GAAG,GAAhB;;AACA,QAAIC,SAAS,IAAIA,SAAS,CAACK,MAA3B,EAAmC;AAC/BD,MAAAA,GAAG,IAAI,OAAOJ,SAAd;AACH;;AAEDI,IAAAA,GAAG,IAAIH,IAAP;;AAEA,QAAIC,KAAK,IAAIA,KAAK,CAACG,MAAnB,EAA2B;AACvBD,MAAAA,GAAG,IAAI,MAAMF,KAAb;AACH;;AAED,QAAIC,QAAQ,IAAIA,QAAQ,CAACE,MAAzB,EAAiC;AAC7BD,MAAAA,GAAG,IAAI,MAAMD,QAAb;AACH;;AAED,WAAOC,GAAP;AACH;;AAED,WAASpB,WAAT,CAAqBa,KAArB,EAA4BU,UAA5B,EAAwC;AACpC,QAAI,CAACzB,MAAM,CAACe,KAAD,CAAX,EAAoB;AAChB;AACH;;AAED,QAAIF,QAAQ,GAAG,EAAf;AACA,QAAII,MAAM,GAAG,EAAb;AACA,QAAIC,SAAS,GAAG,EAAhB;AACA,QAAIC,IAAI,GAAG,EAAX;AACA,QAAIO,IAAI,GAAG,EAAX;AACA,QAAIN,KAAK,GAAG,EAAZ;AACA,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,GAAG,GAAG,EAAV,CAZoC,CAcpC;;AACAT,IAAAA,QAAQ,GAAGF,QAAQ,CAACI,KAAD,CAAnB;AACAE,IAAAA,MAAM,GAAGJ,QAAQ,CAAC,CAAD,CAAjB;AACAK,IAAAA,SAAS,GAAGL,QAAQ,CAAC,CAAD,CAApB;AACAM,IAAAA,IAAI,GAAGN,QAAQ,CAAC,CAAD,CAAf;AACAO,IAAAA,KAAK,GAAGP,QAAQ,CAAC,CAAD,CAAhB;AACAQ,IAAAA,QAAQ,GAAGR,QAAQ,CAAC,CAAD,CAAnB;AAEA,QAAI,CAACI,MAAL,EAAc;;AAEd,QAAGQ,UAAH,EAAe;AACX,UAAIR,MAAM,CAACO,WAAP,MAAwB,OAA5B,EAAqC;AACxC,KAFD,MAEO;AACH,UAAIP,MAAM,CAACO,WAAP,MAAwB,MAA5B,EAAoC;AACvC,KA5BmC,CA8BpC;AACA;;;AACA,QAAI,CAACN,SAAL,EAAgB;AACZ;AACH,KAlCmC,CAoCpC;;;AACA,QAAI,UAAUF,IAAV,CAAeE,SAAf,CAAJ,EAA+B;AAC3BQ,MAAAA,IAAI,GAAGR,SAAS,CAACJ,KAAV,CAAgB,SAAhB,EAA2B,CAA3B,CAAP;AACAI,MAAAA,SAAS,GAAGA,SAAS,CAACS,OAAV,CAAkB,OAAlB,EAA2B,EAA3B,CAAZ;AACH;;AAEDL,IAAAA,GAAG,IAAIL,MAAM,GAAG,GAAhB;AACAK,IAAAA,GAAG,IAAI,OAAOJ,SAAd;;AAEA,QAAIQ,IAAJ,EAAU;AACNJ,MAAAA,GAAG,IAAII,IAAP;AACH;;AAEDJ,IAAAA,GAAG,IAAIH,IAAP;;AAEA,QAAGC,KAAK,IAAIA,KAAK,CAACG,MAAlB,EAAyB;AACrBD,MAAAA,GAAG,IAAI,MAAMF,KAAb;AACH;;AAED,QAAGC,QAAQ,IAAIA,QAAQ,CAACE,MAAxB,EAA+B;AAC3BD,MAAAA,GAAG,IAAI,MAAMD,QAAb;AACH;;AAED,WAAOC,GAAP;AACH;;AAED,WAASlB,YAAT,CAAsBW,KAAtB,EAA6B;AACzB,WAAOb,WAAW,CAACa,KAAD,EAAQ,IAAR,CAAlB;AACH;;AAED,WAAST,UAAT,CAAoBS,KAApB,EAA2B;AACvB,WAAQb,WAAW,CAACa,KAAD,CAAX,IAAsBX,YAAY,CAACW,KAAD,CAA1C;AACH;AAEJ,CAxJD,EAwJGlB,MAxJH","sourcesContent":["(function(module) {\n    'use strict';\n\n    module.exports.is_uri = is_iri;\n    module.exports.is_http_uri = is_http_iri;\n    module.exports.is_https_uri = is_https_iri;\n    module.exports.is_web_uri = is_web_iri;\n    // Create aliases\n    module.exports.isUri = is_iri;\n    module.exports.isHttpUri = is_http_iri;\n    module.exports.isHttpsUri = is_https_iri;\n    module.exports.isWebUri = is_web_iri;\n\n\n    // private function\n    // internal URI spitter method - direct from RFC 3986\n    var splitUri = function(uri) {\n        var splitted = uri.match(/(?:([^:\\/?#]+):)?(?:\\/\\/([^\\/?#]*))?([^?#]*)(?:\\?([^#]*))?(?:#(.*))?/);\n        return splitted;\n    };\n\n    function is_iri(value) {\n        if (!value) {\n            return;\n        }\n\n        // check for illegal characters\n        if (/[^a-z0-9\\:\\/\\?\\#\\[\\]\\@\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=\\.\\-\\_\\~\\%]/i.test(value)) return;\n\n        // check for hex escapes that aren't complete\n        if (/%[^0-9a-f]/i.test(value)) return;\n        if (/%[0-9a-f](:?[^0-9a-f]|$)/i.test(value)) return;\n\n        var splitted = [];\n        var scheme = '';\n        var authority = '';\n        var path = '';\n        var query = '';\n        var fragment = '';\n        var out = '';\n\n        // from RFC 3986\n        splitted = splitUri(value);\n        scheme = splitted[1]; \n        authority = splitted[2];\n        path = splitted[3];\n        query = splitted[4];\n        fragment = splitted[5];\n\n        // scheme and path are required, though the path can be empty\n        if (!(scheme && scheme.length && path.length >= 0)) return;\n\n        // if authority is present, the path must be empty or begin with a /\n        if (authority && authority.length) {\n            if (!(path.length === 0 || /^\\//.test(path))) return;\n        } else {\n            // if authority is not present, the path must not start with //\n            if (/^\\/\\//.test(path)) return;\n        }\n\n        // scheme must begin with a letter, then consist of letters, digits, +, ., or -\n        if (!/^[a-z][a-z0-9\\+\\-\\.]*$/.test(scheme.toLowerCase()))  return;\n\n        // re-assemble the URL per section 5.3 in RFC 3986\n        out += scheme + ':';\n        if (authority && authority.length) {\n            out += '//' + authority;\n        }\n\n        out += path;\n\n        if (query && query.length) {\n            out += '?' + query;\n        }\n\n        if (fragment && fragment.length) {\n            out += '#' + fragment;\n        }\n\n        return out;\n    }\n\n    function is_http_iri(value, allowHttps) {\n        if (!is_iri(value)) {\n            return;\n        }\n\n        var splitted = [];\n        var scheme = '';\n        var authority = '';\n        var path = '';\n        var port = '';\n        var query = '';\n        var fragment = '';\n        var out = '';\n\n        // from RFC 3986\n        splitted = splitUri(value);\n        scheme = splitted[1]; \n        authority = splitted[2];\n        path = splitted[3];\n        query = splitted[4];\n        fragment = splitted[5];\n\n        if (!scheme)  return;\n\n        if(allowHttps) {\n            if (scheme.toLowerCase() != 'https') return;\n        } else {\n            if (scheme.toLowerCase() != 'http') return;\n        }\n\n        // fully-qualified URIs must have an authority section that is\n        // a valid host\n        if (!authority) {\n            return;\n        }\n\n        // enable port component\n        if (/:(\\d+)$/.test(authority)) {\n            port = authority.match(/:(\\d+)$/)[0];\n            authority = authority.replace(/:\\d+$/, '');\n        }\n\n        out += scheme + ':';\n        out += '//' + authority;\n        \n        if (port) {\n            out += port;\n        }\n        \n        out += path;\n        \n        if(query && query.length){\n            out += '?' + query;\n        }\n\n        if(fragment && fragment.length){\n            out += '#' + fragment;\n        }\n        \n        return out;\n    }\n\n    function is_https_iri(value) {\n        return is_http_iri(value, true);\n    }\n\n    function is_web_iri(value) {\n        return (is_http_iri(value) || is_https_iri(value));\n    }\n\n})(module);\n"]},"metadata":{},"sourceType":"script"}