{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar axios = require('axios');\n\nvar Input = require('./Input');\n\nvar _require = require('./constants'),\n    API = _require.API,\n    ERRORS = _require.ERRORS,\n    MAX_BATCH_SIZE = _require.MAX_BATCH_SIZE,\n    replaceVars = _require.replaceVars;\n\nvar INPUT_PATH = API.INPUT_PATH,\n    INPUTS_PATH = API.INPUTS_PATH,\n    INPUTS_STATUS_PATH = API.INPUTS_STATUS_PATH,\n    SEARCH_PATH = API.SEARCH_PATH,\n    SEARCH_FEEDBACK_PATH = API.SEARCH_FEEDBACK_PATH;\n\nvar _require2 = require('./utils'),\n    wrapToken = _require2.wrapToken,\n    formatInput = _require2.formatInput,\n    formatImagesSearch = _require2.formatImagesSearch,\n    formatConceptsSearch = _require2.formatConceptsSearch;\n\nvar _require3 = require('./helpers'),\n    isSuccess = _require3.isSuccess,\n    checkType = _require3.checkType,\n    clone = _require3.clone;\n/**\n * class representing a collection of inputs\n * @class\n */\n\n\nvar Inputs = function () {\n  function Inputs(_config) {\n    var _this = this;\n\n    var rawData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    _classCallCheck(this, Inputs);\n\n    this.rawData = rawData;\n    rawData.forEach(function (inputData, index) {\n      if (inputData.input && inputData.score) {\n        inputData.input.score = inputData.score;\n        inputData = inputData.input;\n      }\n\n      _this[index] = new Input(_this._config, inputData);\n    });\n    this.length = rawData.length;\n    this._config = _config;\n  }\n  /**\n   * Get all inputs in app\n   * @param {Object}    options  Object with keys explained below: (optional)\n   *   @param {Number}    options.page  The page number (optional, default: 1)\n   *   @param {Number}    options.perPage  Number of images to return per page (optional, default: 20)\n   * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n   */\n\n\n  _createClass(Inputs, [{\n    key: 'list',\n    value: function list() {\n      var _this2 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        page: 1,\n        perPage: 20\n      };\n      var url = '' + this._config.basePath + INPUTS_PATH;\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.get(url, {\n            headers: headers,\n            params: {\n              page: options.page,\n              per_page: options.perPage\n            }\n          }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Inputs(_this2._config, response.data.inputs));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n    /**\n     * Adds an input or multiple inputs\n     * @param {object|object[]}        inputs                                Can be a single media object or an array of media objects (max of 128 inputs/call; passing > 128 will throw an exception)\n     *   @param {object|string}          inputs[].input                        If string, is given, this is assumed to be an image url\n     *     @param {string}                 inputs[].input.(url|base64)           Can be a publicly accessibly url or base64 string representing image bytes (required)\n     *     @param {string}                 inputs[].input.id                     ID of input (optional)\n     *     @param {number[]}               inputs[].input.crop                   An array containing the percent to be cropped from top, left, bottom and right (optional)\n     *     @param {boolean}               inputs[].input.allowDuplicateUrl       Whether to allow duplicate URL\n     *     @param {object[]}               inputs[].input.metadata               Object with key and values pair (value can be string, array or other objects) to attach to the input (optional)\n     *     @param {object}                 inputs[].input.geo                    Object with latitude and longitude coordinates to associate with an input. Can be used in search query as the proximity of an input to a reference point (optional)\n     *       @param {number}                 inputs[].input.geo.latitude           +/- latitude val of geodata\n     *       @param {number}                 inputs[].input.geo.longitude          +/- longitude val of geodata\n     *     @param {object[]}               inputs[].input.concepts               An array of concepts to attach to media object (optional)\n     *       @param {object|string}          inputs[].input.concepts[].concept     If string, is given, this is assumed to be concept id with value equals true\n     *         @param {string}                 inputs[].input.concepts[].concept.id          The concept id (required)\n     *         @param {boolean}                inputs[].input.concepts[].concept.value       Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n     */\n\n  }, {\n    key: 'create',\n    value: function create(inputs) {\n      var _this3 = this;\n\n      if (checkType(/(String|Object)/, inputs)) {\n        inputs = [inputs];\n      }\n\n      var url = '' + this._config.basePath + INPUTS_PATH;\n\n      if (inputs.length > MAX_BATCH_SIZE) {\n        throw ERRORS.MAX_INPUTS;\n      }\n\n      return wrapToken(this._config, function (headers) {\n        var data = {\n          inputs: inputs.map(formatInput)\n        };\n        return new Promise(function (resolve, reject) {\n          axios.post(url, data, {\n            headers: headers\n          }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Inputs(_this3._config, response.data.inputs));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n    /**\n     * Get input by id\n     * @param {String}    id  The input id\n     * @return {Promise(Input, error)} A Promise that is fulfilled with an instance of Input or rejected with an error\n     */\n\n  }, {\n    key: 'get',\n    value: function get(id) {\n      var _this4 = this;\n\n      var url = '' + this._config.basePath + replaceVars(INPUT_PATH, [id]);\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.get(url, {\n            headers: headers\n          }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Input(_this4._config, response.data.input));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n    /**\n     * Delete an input or a list of inputs by id or all inputs if no id is passed\n     * @param {string|string[]}    id           The id of input to delete (optional)\n     * @return {Promise(response, error)} A Promise that is fulfilled with the API response or rejected with an error\n     */\n\n  }, {\n    key: 'delete',\n    value: function _delete() {\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var val = void 0; // delete an input\n\n      if (checkType(/String/, id)) {\n        var url = '' + this._config.basePath + replaceVars(INPUT_PATH, [id]);\n        val = wrapToken(this._config, function (headers) {\n          return axios.delete(url, {\n            headers: headers\n          });\n        });\n      } else {\n        val = this._deleteInputs(id);\n      }\n\n      return val;\n    }\n  }, {\n    key: '_deleteInputs',\n    value: function _deleteInputs() {\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var url = '' + this._config.basePath + INPUTS_PATH;\n      return wrapToken(this._config, function (headers) {\n        var data = id === null ? {\n          delete_all: true\n        } : {\n          ids: id\n        };\n        return axios({\n          url: url,\n          method: 'delete',\n          headers: headers,\n          data: data\n        });\n      });\n    }\n    /**\n     * Merge concepts to inputs in bulk\n     * @param {object[]}         inputs    List of concepts to update (max of 128 inputs/call; passing > 128 will throw an exception)\n     *   @param {object}           inputs[].input\n     *     @param {string}           inputs[].input.id        The id of the input to update\n     *     @param {string}           inputs[].input.concepts  Object with keys explained below:\n     *       @param {object}           inputs[].input.concepts[].concept\n     *         @param {string}           inputs[].input.concepts[].concept.id        The concept id (required)\n     *         @param {boolean}          inputs[].input.concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n     */\n\n  }, {\n    key: 'mergeConcepts',\n    value: function mergeConcepts(inputs) {\n      inputs.action = 'merge';\n      return this.update(inputs);\n    }\n    /**\n     * Delete concepts to inputs in bulk\n     * @param {object[]}         inputs    List of concepts to update (max of 128 inputs/call; passing > 128 will throw an exception)\n     *   @param {object}           inputs[].input\n     *     @param {string}           inputs[].input.id                           The id of the input to update\n     *     @param {string}           inputs[].input.concepts                     Object with keys explained below:\n     *       @param {object}           inputs[].input.concepts[].concept\n     *         @param {string}           inputs[].input.concepts[].concept.id        The concept id (required)\n     *         @param {boolean}          inputs[].input.concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n     */\n\n  }, {\n    key: 'deleteConcepts',\n    value: function deleteConcepts(inputs) {\n      inputs.action = 'remove';\n      return this.update(inputs);\n    }\n    /**\n     * Overwrite inputs in bulk\n     * @param {object[]}         inputs    List of concepts to update (max of 128 inputs/call; passing > 128 will throw an exception)\n     *   @param {object}           inputs[].input\n     *     @param {string}           inputs[].input.id                           The id of the input to update\n     *     @param {string}           inputs[].input.concepts                     Object with keys explained below:\n     *       @param {object}           inputs[].input.concepts[].concept\n     *         @param {string}           inputs[].input.concepts[].concept.id        The concept id (required)\n     *         @param {boolean}          inputs[].input.concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n     */\n\n  }, {\n    key: 'overwriteConcepts',\n    value: function overwriteConcepts(inputs) {\n      inputs.action = 'overwrite';\n      return this.update(inputs);\n    }\n    /**\n     * @param {object[]}         inputs    List of inputs to update (max of 128 inputs/call; passing > 128 will throw an exception)\n     *   @param {object}           inputs[].input\n     *     @param {string}           inputs[].input.id                           The id of the input to update\n     *     @param {object}           inputs[].input.metadata                     Object with key values to attach to the input (optional)\n     *     @param {object}           inputs[].input.geo                          Object with latitude and longitude coordinates to associate with an input. Can be used in search query as the proximity of an input to a reference point (optional)\n     *       @param {number}           inputs[].input.geo.latitude                 +/- latitude val of geodata\n     *       @param {number}           inputs[].input.geo.longitude                +/- longitude val of geodata\n     *     @param {string}           inputs[].input.concepts                     Object with keys explained below (optional):\n     *       @param {object}           inputs[].input.concepts[].concept\n     *         @param {string}           inputs[].input.concepts[].concept.id        The concept id (required)\n     *         @param {boolean}          inputs[].input.concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n     */\n\n  }, {\n    key: 'update',\n    value: function update(inputs) {\n      var _this5 = this;\n\n      var url = '' + this._config.basePath + INPUTS_PATH;\n      var inputsList = Array.isArray(inputs) ? inputs : [inputs];\n\n      if (inputsList.length > MAX_BATCH_SIZE) {\n        throw ERRORS.MAX_INPUTS;\n      }\n\n      var data = {\n        action: inputs.action,\n        inputs: inputsList.map(function (input) {\n          return formatInput(input, false);\n        })\n      };\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.patch(url, data, {\n            headers: headers\n          }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Inputs(_this5._config, response.data.inputs));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n    /**\n     * Search for inputs or outputs based on concepts or images\n     *   @param {object[]}               queries          List of all predictions to match with\n     *     @param {object}                 queries[].concept            An object with the following keys:\n     *       @param {string}                 queries[].concept.id          The concept id\n     *       @param {string}                 queries[].concept.type        Search over 'input' to get input matches to criteria or 'output' to get inputs that are visually similar to the criteria (default: 'output')\n     *       @param {string}                 queries[].concept.name        The concept name\n     *       @param {boolean}                queries[].concept.value       Indicates whether or not the term should match with the prediction returned (default: true)\n     *     @param {object}                 queries[].input              An image object that contains the following keys:\n     *       @param {string}                 queries[].input.id            The input id\n     *       @param {string}                 queries[].input.type          Search over 'input' to get input matches to criteria or 'output' to get inputs that are visually similar to the criteria (default: 'output')\n     *       @param {string}                 queries[].input.(base64|url)  Can be a publicly accessibly url or base64 string representing image bytes (required)\n     *       @param {number[]}               queries[].input.crop          An array containing the percent to be cropped from top, left, bottom and right (optional)\n     *       @param {object}                 queries[].input.metadata      An object with key and value specified by user to refine search with (optional)\n     * @param {Object}                   options       Object with keys explained below: (optional)\n     *    @param {Number}                  options.page          The page number (optional, default: 1)\n     *    @param {Number}                  options.perPage       Number of images to return per page (optional, default: 20)\n     * @return {Promise(response, error)} A Promise that is fulfilled with the API response or rejected with an error\n     */\n\n  }, {\n    key: 'search',\n    value: function search() {\n      var queries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        page: 1,\n        perPage: 20\n      };\n      var formattedAnds = [];\n      var url = '' + this._config.basePath + SEARCH_PATH;\n      var data = {\n        query: {\n          ands: []\n        },\n        pagination: {\n          page: options.page,\n          per_page: options.perPage\n        }\n      };\n\n      if (!Array.isArray(queries)) {\n        queries = [queries];\n      }\n\n      if (queries.length > 0) {\n        queries.forEach(function (query) {\n          if (query.input) {\n            formattedAnds = formattedAnds.concat(formatImagesSearch(query.input));\n          } else if (query.concept) {\n            formattedAnds = formattedAnds.concat(formatConceptsSearch(query.concept));\n          }\n        });\n        data.query.ands = formattedAnds;\n      }\n\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.post(url, data, {\n            headers: headers\n          }).then(function (response) {\n            if (isSuccess(response)) {\n              var _data = clone(response.data);\n\n              _data.rawData = clone(response.data);\n              resolve(_data);\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n  }, {\n    key: 'searchFeedback',\n    value: function searchFeedback(inputID, searchID, endUserID, sessionID) {\n      var url = '' + this._config.basePath + SEARCH_FEEDBACK_PATH;\n      var body = {\n        input: {\n          id: inputID,\n          feedback_info: {\n            event_type: 'search_click',\n            search_id: searchID,\n            end_user_id: endUserID,\n            session_id: sessionID\n          }\n        }\n      };\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.post(url, body, {\n            headers: headers\n          }).then(function (_ref) {\n            var data = _ref.data;\n            var d = clone(data);\n            d.rawData = clone(data);\n            resolve(d);\n          }, reject);\n        });\n      });\n    }\n    /**\n     * Get inputs status (number of uploaded, in process or failed inputs)\n     * @return {Promise(response, error)} A Promise that is fulfilled with the API response or rejected with an error\n     */\n\n  }, {\n    key: 'getStatus',\n    value: function getStatus() {\n      var url = '' + this._config.basePath + INPUTS_STATUS_PATH;\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.get(url, {\n            headers: headers\n          }).then(function (response) {\n            if (isSuccess(response)) {\n              var data = clone(response.data);\n              data.rawData = clone(response.data);\n              resolve(data);\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n  }]);\n\n  return Inputs;\n}();\n\n;\nmodule.exports = Inputs;","map":{"version":3,"sources":["/Users/kudy/Desktop/Face-Detectify/node_modules/clarifai/dist/Inputs.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","axios","require","Input","_require","API","ERRORS","MAX_BATCH_SIZE","replaceVars","INPUT_PATH","INPUTS_PATH","INPUTS_STATUS_PATH","SEARCH_PATH","SEARCH_FEEDBACK_PATH","_require2","wrapToken","formatInput","formatImagesSearch","formatConceptsSearch","_require3","isSuccess","checkType","clone","Inputs","_config","_this","rawData","arguments","undefined","forEach","inputData","index","input","score","value","list","_this2","options","page","perPage","url","basePath","headers","Promise","resolve","reject","get","params","per_page","then","response","data","inputs","create","_this3","MAX_INPUTS","map","post","id","_this4","_delete","val","delete","_deleteInputs","delete_all","ids","method","mergeConcepts","action","update","deleteConcepts","overwriteConcepts","_this5","inputsList","Array","isArray","patch","search","queries","formattedAnds","query","ands","pagination","concat","concept","_data","searchFeedback","inputID","searchID","endUserID","sessionID","body","feedback_info","event_type","search_id","end_user_id","session_id","_ref","d","getStatus","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar axios = require('axios');\nvar Input = require('./Input');\n\nvar _require = require('./constants'),\n    API = _require.API,\n    ERRORS = _require.ERRORS,\n    MAX_BATCH_SIZE = _require.MAX_BATCH_SIZE,\n    replaceVars = _require.replaceVars;\n\nvar INPUT_PATH = API.INPUT_PATH,\n    INPUTS_PATH = API.INPUTS_PATH,\n    INPUTS_STATUS_PATH = API.INPUTS_STATUS_PATH,\n    SEARCH_PATH = API.SEARCH_PATH,\n    SEARCH_FEEDBACK_PATH = API.SEARCH_FEEDBACK_PATH;\n\nvar _require2 = require('./utils'),\n    wrapToken = _require2.wrapToken,\n    formatInput = _require2.formatInput,\n    formatImagesSearch = _require2.formatImagesSearch,\n    formatConceptsSearch = _require2.formatConceptsSearch;\n\nvar _require3 = require('./helpers'),\n    isSuccess = _require3.isSuccess,\n    checkType = _require3.checkType,\n    clone = _require3.clone;\n\n/**\n * class representing a collection of inputs\n * @class\n */\n\n\nvar Inputs = function () {\n  function Inputs(_config) {\n    var _this = this;\n\n    var rawData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    _classCallCheck(this, Inputs);\n\n    this.rawData = rawData;\n    rawData.forEach(function (inputData, index) {\n      if (inputData.input && inputData.score) {\n        inputData.input.score = inputData.score;\n        inputData = inputData.input;\n      }\n      _this[index] = new Input(_this._config, inputData);\n    });\n    this.length = rawData.length;\n    this._config = _config;\n  }\n\n  /**\n   * Get all inputs in app\n   * @param {Object}    options  Object with keys explained below: (optional)\n   *   @param {Number}    options.page  The page number (optional, default: 1)\n   *   @param {Number}    options.perPage  Number of images to return per page (optional, default: 20)\n   * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n   */\n\n\n  _createClass(Inputs, [{\n    key: 'list',\n    value: function list() {\n      var _this2 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { page: 1, perPage: 20 };\n\n      var url = '' + this._config.basePath + INPUTS_PATH;\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.get(url, {\n            headers: headers,\n            params: {\n              page: options.page,\n              per_page: options.perPage\n            }\n          }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Inputs(_this2._config, response.data.inputs));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Adds an input or multiple inputs\n     * @param {object|object[]}        inputs                                Can be a single media object or an array of media objects (max of 128 inputs/call; passing > 128 will throw an exception)\n     *   @param {object|string}          inputs[].input                        If string, is given, this is assumed to be an image url\n     *     @param {string}                 inputs[].input.(url|base64)           Can be a publicly accessibly url or base64 string representing image bytes (required)\n     *     @param {string}                 inputs[].input.id                     ID of input (optional)\n     *     @param {number[]}               inputs[].input.crop                   An array containing the percent to be cropped from top, left, bottom and right (optional)\n     *     @param {boolean}               inputs[].input.allowDuplicateUrl       Whether to allow duplicate URL\n     *     @param {object[]}               inputs[].input.metadata               Object with key and values pair (value can be string, array or other objects) to attach to the input (optional)\n     *     @param {object}                 inputs[].input.geo                    Object with latitude and longitude coordinates to associate with an input. Can be used in search query as the proximity of an input to a reference point (optional)\n     *       @param {number}                 inputs[].input.geo.latitude           +/- latitude val of geodata\n     *       @param {number}                 inputs[].input.geo.longitude          +/- longitude val of geodata\n     *     @param {object[]}               inputs[].input.concepts               An array of concepts to attach to media object (optional)\n     *       @param {object|string}          inputs[].input.concepts[].concept     If string, is given, this is assumed to be concept id with value equals true\n     *         @param {string}                 inputs[].input.concepts[].concept.id          The concept id (required)\n     *         @param {boolean}                inputs[].input.concepts[].concept.value       Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n     */\n\n  }, {\n    key: 'create',\n    value: function create(inputs) {\n      var _this3 = this;\n\n      if (checkType(/(String|Object)/, inputs)) {\n        inputs = [inputs];\n      }\n      var url = '' + this._config.basePath + INPUTS_PATH;\n      if (inputs.length > MAX_BATCH_SIZE) {\n        throw ERRORS.MAX_INPUTS;\n      }\n      return wrapToken(this._config, function (headers) {\n        var data = {\n          inputs: inputs.map(formatInput)\n        };\n        return new Promise(function (resolve, reject) {\n          axios.post(url, data, { headers: headers }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Inputs(_this3._config, response.data.inputs));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Get input by id\n     * @param {String}    id  The input id\n     * @return {Promise(Input, error)} A Promise that is fulfilled with an instance of Input or rejected with an error\n     */\n\n  }, {\n    key: 'get',\n    value: function get(id) {\n      var _this4 = this;\n\n      var url = '' + this._config.basePath + replaceVars(INPUT_PATH, [id]);\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.get(url, { headers: headers }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Input(_this4._config, response.data.input));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Delete an input or a list of inputs by id or all inputs if no id is passed\n     * @param {string|string[]}    id           The id of input to delete (optional)\n     * @return {Promise(response, error)} A Promise that is fulfilled with the API response or rejected with an error\n     */\n\n  }, {\n    key: 'delete',\n    value: function _delete() {\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      var val = void 0;\n      // delete an input\n      if (checkType(/String/, id)) {\n        var url = '' + this._config.basePath + replaceVars(INPUT_PATH, [id]);\n        val = wrapToken(this._config, function (headers) {\n          return axios.delete(url, { headers: headers });\n        });\n      } else {\n        val = this._deleteInputs(id);\n      }\n      return val;\n    }\n  }, {\n    key: '_deleteInputs',\n    value: function _deleteInputs() {\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      var url = '' + this._config.basePath + INPUTS_PATH;\n      return wrapToken(this._config, function (headers) {\n        var data = id === null ? { delete_all: true } : { ids: id };\n        return axios({\n          url: url,\n          method: 'delete',\n          headers: headers,\n          data: data\n        });\n      });\n    }\n\n    /**\n     * Merge concepts to inputs in bulk\n     * @param {object[]}         inputs    List of concepts to update (max of 128 inputs/call; passing > 128 will throw an exception)\n     *   @param {object}           inputs[].input\n     *     @param {string}           inputs[].input.id        The id of the input to update\n     *     @param {string}           inputs[].input.concepts  Object with keys explained below:\n     *       @param {object}           inputs[].input.concepts[].concept\n     *         @param {string}           inputs[].input.concepts[].concept.id        The concept id (required)\n     *         @param {boolean}          inputs[].input.concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n     */\n\n  }, {\n    key: 'mergeConcepts',\n    value: function mergeConcepts(inputs) {\n      inputs.action = 'merge';\n      return this.update(inputs);\n    }\n\n    /**\n     * Delete concepts to inputs in bulk\n     * @param {object[]}         inputs    List of concepts to update (max of 128 inputs/call; passing > 128 will throw an exception)\n     *   @param {object}           inputs[].input\n     *     @param {string}           inputs[].input.id                           The id of the input to update\n     *     @param {string}           inputs[].input.concepts                     Object with keys explained below:\n     *       @param {object}           inputs[].input.concepts[].concept\n     *         @param {string}           inputs[].input.concepts[].concept.id        The concept id (required)\n     *         @param {boolean}          inputs[].input.concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n     */\n\n  }, {\n    key: 'deleteConcepts',\n    value: function deleteConcepts(inputs) {\n      inputs.action = 'remove';\n      return this.update(inputs);\n    }\n\n    /**\n     * Overwrite inputs in bulk\n     * @param {object[]}         inputs    List of concepts to update (max of 128 inputs/call; passing > 128 will throw an exception)\n     *   @param {object}           inputs[].input\n     *     @param {string}           inputs[].input.id                           The id of the input to update\n     *     @param {string}           inputs[].input.concepts                     Object with keys explained below:\n     *       @param {object}           inputs[].input.concepts[].concept\n     *         @param {string}           inputs[].input.concepts[].concept.id        The concept id (required)\n     *         @param {boolean}          inputs[].input.concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n     */\n\n  }, {\n    key: 'overwriteConcepts',\n    value: function overwriteConcepts(inputs) {\n      inputs.action = 'overwrite';\n      return this.update(inputs);\n    }\n\n    /**\n     * @param {object[]}         inputs    List of inputs to update (max of 128 inputs/call; passing > 128 will throw an exception)\n     *   @param {object}           inputs[].input\n     *     @param {string}           inputs[].input.id                           The id of the input to update\n     *     @param {object}           inputs[].input.metadata                     Object with key values to attach to the input (optional)\n     *     @param {object}           inputs[].input.geo                          Object with latitude and longitude coordinates to associate with an input. Can be used in search query as the proximity of an input to a reference point (optional)\n     *       @param {number}           inputs[].input.geo.latitude                 +/- latitude val of geodata\n     *       @param {number}           inputs[].input.geo.longitude                +/- longitude val of geodata\n     *     @param {string}           inputs[].input.concepts                     Object with keys explained below (optional):\n     *       @param {object}           inputs[].input.concepts[].concept\n     *         @param {string}           inputs[].input.concepts[].concept.id        The concept id (required)\n     *         @param {boolean}          inputs[].input.concepts[].concept.value     Whether or not the input is a positive (true) or negative (false) example of the concept (default: true)\n     * @return {Promise(Inputs, error)} A Promise that is fulfilled with an instance of Inputs or rejected with an error\n     */\n\n  }, {\n    key: 'update',\n    value: function update(inputs) {\n      var _this5 = this;\n\n      var url = '' + this._config.basePath + INPUTS_PATH;\n      var inputsList = Array.isArray(inputs) ? inputs : [inputs];\n      if (inputsList.length > MAX_BATCH_SIZE) {\n        throw ERRORS.MAX_INPUTS;\n      }\n      var data = {\n        action: inputs.action,\n        inputs: inputsList.map(function (input) {\n          return formatInput(input, false);\n        })\n      };\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.patch(url, data, { headers: headers }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Inputs(_this5._config, response.data.inputs));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Search for inputs or outputs based on concepts or images\n     *   @param {object[]}               queries          List of all predictions to match with\n     *     @param {object}                 queries[].concept            An object with the following keys:\n     *       @param {string}                 queries[].concept.id          The concept id\n     *       @param {string}                 queries[].concept.type        Search over 'input' to get input matches to criteria or 'output' to get inputs that are visually similar to the criteria (default: 'output')\n     *       @param {string}                 queries[].concept.name        The concept name\n     *       @param {boolean}                queries[].concept.value       Indicates whether or not the term should match with the prediction returned (default: true)\n     *     @param {object}                 queries[].input              An image object that contains the following keys:\n     *       @param {string}                 queries[].input.id            The input id\n     *       @param {string}                 queries[].input.type          Search over 'input' to get input matches to criteria or 'output' to get inputs that are visually similar to the criteria (default: 'output')\n     *       @param {string}                 queries[].input.(base64|url)  Can be a publicly accessibly url or base64 string representing image bytes (required)\n     *       @param {number[]}               queries[].input.crop          An array containing the percent to be cropped from top, left, bottom and right (optional)\n     *       @param {object}                 queries[].input.metadata      An object with key and value specified by user to refine search with (optional)\n     * @param {Object}                   options       Object with keys explained below: (optional)\n     *    @param {Number}                  options.page          The page number (optional, default: 1)\n     *    @param {Number}                  options.perPage       Number of images to return per page (optional, default: 20)\n     * @return {Promise(response, error)} A Promise that is fulfilled with the API response or rejected with an error\n     */\n\n  }, {\n    key: 'search',\n    value: function search() {\n      var queries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { page: 1, perPage: 20 };\n\n      var formattedAnds = [];\n      var url = '' + this._config.basePath + SEARCH_PATH;\n      var data = {\n        query: {\n          ands: []\n        },\n        pagination: {\n          page: options.page,\n          per_page: options.perPage\n        }\n      };\n\n      if (!Array.isArray(queries)) {\n        queries = [queries];\n      }\n      if (queries.length > 0) {\n        queries.forEach(function (query) {\n          if (query.input) {\n            formattedAnds = formattedAnds.concat(formatImagesSearch(query.input));\n          } else if (query.concept) {\n            formattedAnds = formattedAnds.concat(formatConceptsSearch(query.concept));\n          }\n        });\n        data.query.ands = formattedAnds;\n      }\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.post(url, data, { headers: headers }).then(function (response) {\n            if (isSuccess(response)) {\n              var _data = clone(response.data);\n              _data.rawData = clone(response.data);\n              resolve(_data);\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n  }, {\n    key: 'searchFeedback',\n    value: function searchFeedback(inputID, searchID, endUserID, sessionID) {\n      var url = '' + this._config.basePath + SEARCH_FEEDBACK_PATH;\n      var body = {\n        input: {\n          id: inputID,\n          feedback_info: {\n            event_type: 'search_click',\n            search_id: searchID,\n            end_user_id: endUserID,\n            session_id: sessionID\n          }\n        }\n      };\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.post(url, body, {\n            headers: headers\n          }).then(function (_ref) {\n            var data = _ref.data;\n\n            var d = clone(data);\n            d.rawData = clone(data);\n            resolve(d);\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Get inputs status (number of uploaded, in process or failed inputs)\n     * @return {Promise(response, error)} A Promise that is fulfilled with the API response or rejected with an error\n     */\n\n  }, {\n    key: 'getStatus',\n    value: function getStatus() {\n      var url = '' + this._config.basePath + INPUTS_STATUS_PATH;\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.get(url, { headers: headers }).then(function (response) {\n            if (isSuccess(response)) {\n              var data = clone(response.data);\n              data.rawData = clone(response.data);\n              resolve(data);\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n  }]);\n\n  return Inputs;\n}();\n\n;\n\nmodule.exports = Inputs;"]},"metadata":{},"sourceType":"script"}