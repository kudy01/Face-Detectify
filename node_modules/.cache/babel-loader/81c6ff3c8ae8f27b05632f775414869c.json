{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CanvasUtils = void 0;\n\nconst ColorUtils_1 = require(\"./ColorUtils\");\n\nconst Utils_1 = require(\"./Utils\");\n\nclass CanvasUtils {\n  static paintBase(context, dimension, baseColor) {\n    context.save();\n    context.fillStyle = baseColor !== null && baseColor !== void 0 ? baseColor : \"rgba(0,0,0,0)\";\n    context.fillRect(0, 0, dimension.width, dimension.height);\n    context.restore();\n  }\n\n  static clear(context, dimension) {\n    context.clearRect(0, 0, dimension.width, dimension.height);\n  }\n\n  static drawLinkLine(context, width, begin, end, maxDistance, canvasSize, warp, backgroundMask, colorLine, opacity, shadow) {\n    let drawn = false;\n\n    if (Utils_1.Utils.getDistance(begin, end) <= maxDistance) {\n      this.drawLine(context, begin, end);\n      drawn = true;\n    } else if (warp) {\n      let pi1;\n      let pi2;\n      const endNE = {\n        x: end.x - canvasSize.width,\n        y: end.y\n      };\n      const {\n        dx,\n        dy,\n        distance\n      } = Utils_1.Utils.getDistances(begin, endNE);\n\n      if (distance <= maxDistance) {\n        const yi = begin.y - dy / dx * begin.x;\n        pi1 = {\n          x: 0,\n          y: yi\n        };\n        pi2 = {\n          x: canvasSize.width,\n          y: yi\n        };\n      } else {\n        const endSW = {\n          x: end.x,\n          y: end.y - canvasSize.height\n        };\n        const {\n          dx,\n          dy,\n          distance\n        } = Utils_1.Utils.getDistances(begin, endSW);\n\n        if (distance <= maxDistance) {\n          const yi = begin.y - dy / dx * begin.x;\n          const xi = -yi / (dy / dx);\n          pi1 = {\n            x: xi,\n            y: 0\n          };\n          pi2 = {\n            x: xi,\n            y: canvasSize.height\n          };\n        } else {\n          const endSE = {\n            x: end.x - canvasSize.width,\n            y: end.y - canvasSize.height\n          };\n          const {\n            dx,\n            dy,\n            distance\n          } = Utils_1.Utils.getDistances(begin, endSE);\n\n          if (distance <= maxDistance) {\n            const yi = begin.y - dy / dx * begin.x;\n            const xi = -yi / (dy / dx);\n            pi1 = {\n              x: xi,\n              y: yi\n            };\n            pi2 = {\n              x: pi1.x + canvasSize.width,\n              y: pi1.y + canvasSize.height\n            };\n          }\n        }\n      }\n\n      if (pi1 && pi2) {\n        this.drawLine(context, begin, pi1);\n        this.drawLine(context, end, pi2);\n        drawn = true;\n      }\n    }\n\n    if (!drawn) {\n      return;\n    }\n\n    context.lineWidth = width;\n\n    if (backgroundMask) {\n      context.globalCompositeOperation = \"destination-out\";\n    }\n\n    context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromRgb(colorLine, opacity);\n\n    if (shadow.enable) {\n      const shadowColor = ColorUtils_1.ColorUtils.colorToRgb(shadow.color);\n\n      if (shadowColor) {\n        context.shadowBlur = shadow.blur;\n        context.shadowColor = ColorUtils_1.ColorUtils.getStyleFromRgb(shadowColor);\n      }\n    }\n\n    context.stroke();\n  }\n\n  static drawLinkTriangle(context, width, pos1, pos2, pos3, backgroundMask, colorTriangle, opacityTriangle) {\n    this.drawTriangle(context, pos1, pos2, pos3);\n    context.lineWidth = width;\n\n    if (backgroundMask) {\n      context.globalCompositeOperation = \"destination-out\";\n    }\n\n    context.fillStyle = ColorUtils_1.ColorUtils.getStyleFromRgb(colorTriangle, opacityTriangle);\n    context.fill();\n  }\n\n  static drawConnectLine(context, width, lineStyle, begin, end) {\n    context.save();\n    this.drawLine(context, begin, end);\n    context.lineWidth = width;\n    context.strokeStyle = lineStyle;\n    context.stroke();\n    context.restore();\n  }\n\n  static gradient(context, p1, p2, opacity) {\n    const gradStop = Math.floor(p2.size.value / p1.size.value);\n    const color1 = p1.getFillColor();\n    const color2 = p2.getFillColor();\n\n    if (!color1 || !color2) {\n      return;\n    }\n\n    const sourcePos = p1.getPosition();\n    const destPos = p2.getPosition();\n    const midRgb = ColorUtils_1.ColorUtils.mix(color1, color2, p1.size.value, p2.size.value);\n    const grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);\n    grad.addColorStop(0, ColorUtils_1.ColorUtils.getStyleFromHsl(color1, opacity));\n    grad.addColorStop(gradStop > 1 ? 1 : gradStop, ColorUtils_1.ColorUtils.getStyleFromRgb(midRgb, opacity));\n    grad.addColorStop(1, ColorUtils_1.ColorUtils.getStyleFromHsl(color2, opacity));\n    return grad;\n  }\n\n  static drawGrabLine(context, width, begin, end, colorLine, opacity) {\n    context.save();\n    this.drawLine(context, begin, end);\n    context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromRgb(colorLine, opacity);\n    context.lineWidth = width;\n    context.stroke();\n    context.restore();\n  }\n\n  static drawParticle(container, context, particle, delta, fillColorValue, strokeColorValue, backgroundMask, radius, opacity, shadow) {\n    const pos = particle.getPosition();\n    context.save();\n    context.translate(pos.x, pos.y);\n    context.beginPath();\n    const angle = particle.angle + (particle.particlesOptions.rotate.path ? particle.pathAngle : 0);\n\n    if (angle !== 0) {\n      context.rotate(angle);\n    }\n\n    if (backgroundMask) {\n      context.globalCompositeOperation = \"destination-out\";\n    }\n\n    const shadowColor = particle.shadowColor;\n\n    if (shadow.enable && shadowColor) {\n      context.shadowBlur = shadow.blur;\n      context.shadowColor = ColorUtils_1.ColorUtils.getStyleFromRgb(shadowColor);\n      context.shadowOffsetX = shadow.offset.x;\n      context.shadowOffsetY = shadow.offset.y;\n    }\n\n    context.fillStyle = fillColorValue;\n    const stroke = particle.stroke;\n    context.lineWidth = particle.strokeWidth;\n    context.strokeStyle = strokeColorValue;\n\n    if (particle.close) {\n      context.closePath();\n    }\n\n    this.drawShape(container, context, particle, radius, opacity, delta);\n\n    if (stroke.width > 0) {\n      context.stroke();\n    }\n\n    if (particle.fill) {\n      context.fill();\n    }\n\n    context.restore();\n    context.save();\n    context.translate(pos.x, pos.y);\n\n    if (particle.angle !== 0) {\n      context.rotate(particle.angle);\n    }\n\n    if (backgroundMask) {\n      context.globalCompositeOperation = \"destination-out\";\n    }\n\n    this.drawShapeAfterEffect(container, context, particle, radius, opacity, delta);\n    context.restore();\n  }\n\n  static drawShape(container, context, particle, radius, opacity, delta) {\n    if (!particle.shape) {\n      return;\n    }\n\n    const drawer = container.drawers.get(particle.shape);\n\n    if (!drawer) {\n      return;\n    }\n\n    drawer.draw(context, particle, radius, opacity, delta.value, container.retina.pixelRatio);\n  }\n\n  static drawShapeAfterEffect(container, context, particle, radius, opacity, delta) {\n    if (!particle.shape) {\n      return;\n    }\n\n    const drawer = container.drawers.get(particle.shape);\n\n    if (!(drawer === null || drawer === void 0 ? void 0 : drawer.afterEffect)) {\n      return;\n    }\n\n    drawer.afterEffect(context, particle, radius, opacity, delta.value, container.retina.pixelRatio);\n  }\n\n  static drawPlugin(context, plugin, delta) {\n    if (plugin.draw !== undefined) {\n      context.save();\n      plugin.draw(context, delta);\n      context.restore();\n    }\n  }\n\n  static drawLine(context, begin, end) {\n    context.beginPath();\n    context.moveTo(begin.x, begin.y);\n    context.lineTo(end.x, end.y);\n    context.closePath();\n  }\n\n  static drawTriangle(context, p1, p2, p3) {\n    context.beginPath();\n    context.moveTo(p1.x, p1.y);\n    context.lineTo(p2.x, p2.y);\n    context.lineTo(p3.x, p3.y);\n    context.closePath();\n  }\n\n}\n\nexports.CanvasUtils = CanvasUtils;","map":{"version":3,"sources":["/Users/kudy/Desktop/Face-Detectify/node_modules/tsparticles/dist/Utils/CanvasUtils.js"],"names":["Object","defineProperty","exports","value","CanvasUtils","ColorUtils_1","require","Utils_1","paintBase","context","dimension","baseColor","save","fillStyle","fillRect","width","height","restore","clear","clearRect","drawLinkLine","begin","end","maxDistance","canvasSize","warp","backgroundMask","colorLine","opacity","shadow","drawn","Utils","getDistance","drawLine","pi1","pi2","endNE","x","y","dx","dy","distance","getDistances","yi","endSW","xi","endSE","lineWidth","globalCompositeOperation","strokeStyle","ColorUtils","getStyleFromRgb","enable","shadowColor","colorToRgb","color","shadowBlur","blur","stroke","drawLinkTriangle","pos1","pos2","pos3","colorTriangle","opacityTriangle","drawTriangle","fill","drawConnectLine","lineStyle","gradient","p1","p2","gradStop","Math","floor","size","color1","getFillColor","color2","sourcePos","getPosition","destPos","midRgb","mix","grad","createLinearGradient","addColorStop","getStyleFromHsl","drawGrabLine","drawParticle","container","particle","delta","fillColorValue","strokeColorValue","radius","pos","translate","beginPath","angle","particlesOptions","rotate","path","pathAngle","shadowOffsetX","offset","shadowOffsetY","strokeWidth","close","closePath","drawShape","drawShapeAfterEffect","shape","drawer","drawers","get","draw","retina","pixelRatio","afterEffect","drawPlugin","plugin","undefined","moveTo","lineTo","p3"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CanvasUtils = void 0;\nconst ColorUtils_1 = require(\"./ColorUtils\");\nconst Utils_1 = require(\"./Utils\");\nclass CanvasUtils {\n    static paintBase(context, dimension, baseColor) {\n        context.save();\n        context.fillStyle = baseColor !== null && baseColor !== void 0 ? baseColor : \"rgba(0,0,0,0)\";\n        context.fillRect(0, 0, dimension.width, dimension.height);\n        context.restore();\n    }\n    static clear(context, dimension) {\n        context.clearRect(0, 0, dimension.width, dimension.height);\n    }\n    static drawLinkLine(context, width, begin, end, maxDistance, canvasSize, warp, backgroundMask, colorLine, opacity, shadow) {\n        let drawn = false;\n        if (Utils_1.Utils.getDistance(begin, end) <= maxDistance) {\n            this.drawLine(context, begin, end);\n            drawn = true;\n        }\n        else if (warp) {\n            let pi1;\n            let pi2;\n            const endNE = {\n                x: end.x - canvasSize.width,\n                y: end.y,\n            };\n            const { dx, dy, distance } = Utils_1.Utils.getDistances(begin, endNE);\n            if (distance <= maxDistance) {\n                const yi = begin.y - (dy / dx) * begin.x;\n                pi1 = { x: 0, y: yi };\n                pi2 = { x: canvasSize.width, y: yi };\n            }\n            else {\n                const endSW = {\n                    x: end.x,\n                    y: end.y - canvasSize.height,\n                };\n                const { dx, dy, distance } = Utils_1.Utils.getDistances(begin, endSW);\n                if (distance <= maxDistance) {\n                    const yi = begin.y - (dy / dx) * begin.x;\n                    const xi = -yi / (dy / dx);\n                    pi1 = { x: xi, y: 0 };\n                    pi2 = { x: xi, y: canvasSize.height };\n                }\n                else {\n                    const endSE = {\n                        x: end.x - canvasSize.width,\n                        y: end.y - canvasSize.height,\n                    };\n                    const { dx, dy, distance } = Utils_1.Utils.getDistances(begin, endSE);\n                    if (distance <= maxDistance) {\n                        const yi = begin.y - (dy / dx) * begin.x;\n                        const xi = -yi / (dy / dx);\n                        pi1 = { x: xi, y: yi };\n                        pi2 = { x: pi1.x + canvasSize.width, y: pi1.y + canvasSize.height };\n                    }\n                }\n            }\n            if (pi1 && pi2) {\n                this.drawLine(context, begin, pi1);\n                this.drawLine(context, end, pi2);\n                drawn = true;\n            }\n        }\n        if (!drawn) {\n            return;\n        }\n        context.lineWidth = width;\n        if (backgroundMask) {\n            context.globalCompositeOperation = \"destination-out\";\n        }\n        context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromRgb(colorLine, opacity);\n        if (shadow.enable) {\n            const shadowColor = ColorUtils_1.ColorUtils.colorToRgb(shadow.color);\n            if (shadowColor) {\n                context.shadowBlur = shadow.blur;\n                context.shadowColor = ColorUtils_1.ColorUtils.getStyleFromRgb(shadowColor);\n            }\n        }\n        context.stroke();\n    }\n    static drawLinkTriangle(context, width, pos1, pos2, pos3, backgroundMask, colorTriangle, opacityTriangle) {\n        this.drawTriangle(context, pos1, pos2, pos3);\n        context.lineWidth = width;\n        if (backgroundMask) {\n            context.globalCompositeOperation = \"destination-out\";\n        }\n        context.fillStyle = ColorUtils_1.ColorUtils.getStyleFromRgb(colorTriangle, opacityTriangle);\n        context.fill();\n    }\n    static drawConnectLine(context, width, lineStyle, begin, end) {\n        context.save();\n        this.drawLine(context, begin, end);\n        context.lineWidth = width;\n        context.strokeStyle = lineStyle;\n        context.stroke();\n        context.restore();\n    }\n    static gradient(context, p1, p2, opacity) {\n        const gradStop = Math.floor(p2.size.value / p1.size.value);\n        const color1 = p1.getFillColor();\n        const color2 = p2.getFillColor();\n        if (!color1 || !color2) {\n            return;\n        }\n        const sourcePos = p1.getPosition();\n        const destPos = p2.getPosition();\n        const midRgb = ColorUtils_1.ColorUtils.mix(color1, color2, p1.size.value, p2.size.value);\n        const grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);\n        grad.addColorStop(0, ColorUtils_1.ColorUtils.getStyleFromHsl(color1, opacity));\n        grad.addColorStop(gradStop > 1 ? 1 : gradStop, ColorUtils_1.ColorUtils.getStyleFromRgb(midRgb, opacity));\n        grad.addColorStop(1, ColorUtils_1.ColorUtils.getStyleFromHsl(color2, opacity));\n        return grad;\n    }\n    static drawGrabLine(context, width, begin, end, colorLine, opacity) {\n        context.save();\n        this.drawLine(context, begin, end);\n        context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromRgb(colorLine, opacity);\n        context.lineWidth = width;\n        context.stroke();\n        context.restore();\n    }\n    static drawParticle(container, context, particle, delta, fillColorValue, strokeColorValue, backgroundMask, radius, opacity, shadow) {\n        const pos = particle.getPosition();\n        context.save();\n        context.translate(pos.x, pos.y);\n        context.beginPath();\n        const angle = particle.angle + (particle.particlesOptions.rotate.path ? particle.pathAngle : 0);\n        if (angle !== 0) {\n            context.rotate(angle);\n        }\n        if (backgroundMask) {\n            context.globalCompositeOperation = \"destination-out\";\n        }\n        const shadowColor = particle.shadowColor;\n        if (shadow.enable && shadowColor) {\n            context.shadowBlur = shadow.blur;\n            context.shadowColor = ColorUtils_1.ColorUtils.getStyleFromRgb(shadowColor);\n            context.shadowOffsetX = shadow.offset.x;\n            context.shadowOffsetY = shadow.offset.y;\n        }\n        context.fillStyle = fillColorValue;\n        const stroke = particle.stroke;\n        context.lineWidth = particle.strokeWidth;\n        context.strokeStyle = strokeColorValue;\n        if (particle.close) {\n            context.closePath();\n        }\n        this.drawShape(container, context, particle, radius, opacity, delta);\n        if (stroke.width > 0) {\n            context.stroke();\n        }\n        if (particle.fill) {\n            context.fill();\n        }\n        context.restore();\n        context.save();\n        context.translate(pos.x, pos.y);\n        if (particle.angle !== 0) {\n            context.rotate(particle.angle);\n        }\n        if (backgroundMask) {\n            context.globalCompositeOperation = \"destination-out\";\n        }\n        this.drawShapeAfterEffect(container, context, particle, radius, opacity, delta);\n        context.restore();\n    }\n    static drawShape(container, context, particle, radius, opacity, delta) {\n        if (!particle.shape) {\n            return;\n        }\n        const drawer = container.drawers.get(particle.shape);\n        if (!drawer) {\n            return;\n        }\n        drawer.draw(context, particle, radius, opacity, delta.value, container.retina.pixelRatio);\n    }\n    static drawShapeAfterEffect(container, context, particle, radius, opacity, delta) {\n        if (!particle.shape) {\n            return;\n        }\n        const drawer = container.drawers.get(particle.shape);\n        if (!(drawer === null || drawer === void 0 ? void 0 : drawer.afterEffect)) {\n            return;\n        }\n        drawer.afterEffect(context, particle, radius, opacity, delta.value, container.retina.pixelRatio);\n    }\n    static drawPlugin(context, plugin, delta) {\n        if (plugin.draw !== undefined) {\n            context.save();\n            plugin.draw(context, delta);\n            context.restore();\n        }\n    }\n    static drawLine(context, begin, end) {\n        context.beginPath();\n        context.moveTo(begin.x, begin.y);\n        context.lineTo(end.x, end.y);\n        context.closePath();\n    }\n    static drawTriangle(context, p1, p2, p3) {\n        context.beginPath();\n        context.moveTo(p1.x, p1.y);\n        context.lineTo(p2.x, p2.y);\n        context.lineTo(p3.x, p3.y);\n        context.closePath();\n    }\n}\nexports.CanvasUtils = CanvasUtils;\n"]},"metadata":{},"sourceType":"script"}