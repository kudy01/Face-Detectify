{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar axios = require('axios');\n\nvar Concept = require('./Concept');\n\nvar _require = require('./constants'),\n    API = _require.API,\n    replaceVars = _require.replaceVars;\n\nvar CONCEPTS_PATH = API.CONCEPTS_PATH,\n    CONCEPT_PATH = API.CONCEPT_PATH,\n    CONCEPT_SEARCH_PATH = API.CONCEPT_SEARCH_PATH;\n\nvar _require2 = require('./utils'),\n    wrapToken = _require2.wrapToken,\n    formatConcept = _require2.formatConcept;\n\nvar _require3 = require('./helpers'),\n    isSuccess = _require3.isSuccess,\n    checkType = _require3.checkType;\n/**\n * class representing a collection of concepts\n * @class\n */\n\n\nvar Concepts = function () {\n  function Concepts(_config) {\n    var _this = this;\n\n    var rawData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    _classCallCheck(this, Concepts);\n\n    this._config = _config;\n    this.rawData = rawData;\n    rawData.forEach(function (conceptData, index) {\n      _this[index] = new Concept(_this._config, conceptData);\n    });\n    this.length = rawData.length;\n  }\n  /**\n   * List all the concepts\n   * @param {object}     options     Object with keys explained below: (optional)\n   *    @param {number}    options.page        The page number (optional, default: 1)\n   *    @param {number}    options.perPage     Number of images to return per page (optional, default: 20)\n   * @return {Promise(Concepts, error)} A Promise that is fulfilled with a Concepts instance or rejected with an error\n   */\n\n\n  _createClass(Concepts, [{\n    key: 'list',\n    value: function list() {\n      var _this2 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        page: 1,\n        perPage: 20\n      };\n      var url = '' + this._config.basePath + CONCEPTS_PATH;\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.get(url, {\n            headers: headers,\n            params: {\n              'page': options.page,\n              'per_page': options.perPage\n            }\n          }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Concepts(_this2._config, response.data.concepts));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n    /**\n     * List a single concept given an id\n     * @param {String}     id          The concept's id\n     * @return {Promise(Concept, error)} A Promise that is fulfilled with a Concept instance or rejected with an error\n     */\n\n  }, {\n    key: 'get',\n    value: function get(id) {\n      var _this3 = this;\n\n      var url = '' + this._config.basePath + replaceVars(CONCEPT_PATH, [id]);\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.get(url, {\n            headers: headers\n          }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Concept(_this3._config, response.data.concept));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n    /**\n     * Add a list of concepts given an id and name\n     * @param {object|object[]}   concepts       Can be a single media object or an array of media objects\n     *   @param  {object|string}    concepts[].concept         If string, this is assumed to be the concept id. Otherwise, an object with the following attributes\n     *     @param  {object}           concepts[].concept.id      The new concept's id (Required)\n     *     @param  {object}           concepts[].concept.name    The new concept's name\n     * @return {Promise(Concepts, error)}             A Promise that is fulfilled with a Concepts instance or rejected with an error\n     */\n\n  }, {\n    key: 'create',\n    value: function create() {\n      var _this4 = this;\n\n      var concepts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (checkType(/(Object|String)/, concepts)) {\n        concepts = [concepts];\n      }\n\n      var data = {\n        'concepts': concepts.map(formatConcept)\n      };\n      var url = '' + this._config.basePath + CONCEPTS_PATH;\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.post(url, data, {\n            headers: headers\n          }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Concepts(_this4._config, response.data.concepts));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n    /**\n     * Search for a concept given a name. A wildcard can be given (example: The name \"bo*\" will match with \"boat\" and \"bow\" given those concepts exist\n     * @param  {string}   name  The name of the concept to search for\n     * @return {Promise(Concepts, error)} A Promise that is fulfilled with a Concepts instance or rejected with an error\n     */\n\n  }, {\n    key: 'search',\n    value: function search(name) {\n      var _this5 = this;\n\n      var language = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var url = '' + this._config.basePath + CONCEPT_SEARCH_PATH;\n      return wrapToken(this._config, function (headers) {\n        var params = {\n          'concept_query': {\n            name: name,\n            language: language\n          }\n        };\n        return new Promise(function (resolve, reject) {\n          axios.post(url, params, {\n            headers: headers\n          }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Concepts(_this5._config, response.data.concepts));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n    /**\n     * Update a concepts\n     * @param {object|object[]}   concepts       Can be a single concept object or an array of concept objects\n     *   @param  {object}           concepts[].concept         A concept object with the following attributes\n     *     @param  {object}           concepts[].concept.id      The concept's id (Required)\n     *     @param  {object}           concepts[].concept.name    The concept's new name\n     * @param {string}            [action=overwrite]  The action to use for the PATCH\n     * @return {Promise(Concepts, error)}             A Promise that is fulfilled with a Concepts instance or rejected with an error\n     */\n\n  }, {\n    key: 'update',\n    value: function update() {\n      var _this6 = this;\n\n      var concepts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'overwrite';\n\n      if (!checkType(/Array/, concepts)) {\n        concepts = [concepts];\n      }\n\n      var data = {\n        concepts: concepts,\n        action: action\n      };\n      var url = '' + this._config.basePath + CONCEPTS_PATH;\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.patch(url, data, {\n            headers: headers\n          }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Concepts(_this6._config, response.data.concepts));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n  }]);\n\n  return Concepts;\n}();\n\n;\nmodule.exports = Concepts;","map":{"version":3,"sources":["/Users/kudy/Desktop/Face-Detectify/node_modules/clarifai/dist/Concepts.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","axios","require","Concept","_require","API","replaceVars","CONCEPTS_PATH","CONCEPT_PATH","CONCEPT_SEARCH_PATH","_require2","wrapToken","formatConcept","_require3","isSuccess","checkType","Concepts","_config","_this","rawData","arguments","undefined","forEach","conceptData","index","value","list","_this2","options","page","perPage","url","basePath","headers","Promise","resolve","reject","get","params","then","response","data","concepts","id","_this3","concept","create","_this4","map","post","search","name","_this5","language","update","_this6","action","patch","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar axios = require('axios');\nvar Concept = require('./Concept');\n\nvar _require = require('./constants'),\n    API = _require.API,\n    replaceVars = _require.replaceVars;\n\nvar CONCEPTS_PATH = API.CONCEPTS_PATH,\n    CONCEPT_PATH = API.CONCEPT_PATH,\n    CONCEPT_SEARCH_PATH = API.CONCEPT_SEARCH_PATH;\n\nvar _require2 = require('./utils'),\n    wrapToken = _require2.wrapToken,\n    formatConcept = _require2.formatConcept;\n\nvar _require3 = require('./helpers'),\n    isSuccess = _require3.isSuccess,\n    checkType = _require3.checkType;\n\n/**\n * class representing a collection of concepts\n * @class\n */\n\n\nvar Concepts = function () {\n  function Concepts(_config) {\n    var _this = this;\n\n    var rawData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    _classCallCheck(this, Concepts);\n\n    this._config = _config;\n    this.rawData = rawData;\n    rawData.forEach(function (conceptData, index) {\n      _this[index] = new Concept(_this._config, conceptData);\n    });\n    this.length = rawData.length;\n  }\n\n  /**\n   * List all the concepts\n   * @param {object}     options     Object with keys explained below: (optional)\n   *    @param {number}    options.page        The page number (optional, default: 1)\n   *    @param {number}    options.perPage     Number of images to return per page (optional, default: 20)\n   * @return {Promise(Concepts, error)} A Promise that is fulfilled with a Concepts instance or rejected with an error\n   */\n\n\n  _createClass(Concepts, [{\n    key: 'list',\n    value: function list() {\n      var _this2 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { page: 1, perPage: 20 };\n\n      var url = '' + this._config.basePath + CONCEPTS_PATH;\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.get(url, {\n            headers: headers,\n            params: {\n              'page': options.page,\n              'per_page': options.perPage\n            }\n          }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Concepts(_this2._config, response.data.concepts));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * List a single concept given an id\n     * @param {String}     id          The concept's id\n     * @return {Promise(Concept, error)} A Promise that is fulfilled with a Concept instance or rejected with an error\n     */\n\n  }, {\n    key: 'get',\n    value: function get(id) {\n      var _this3 = this;\n\n      var url = '' + this._config.basePath + replaceVars(CONCEPT_PATH, [id]);\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.get(url, { headers: headers }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Concept(_this3._config, response.data.concept));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Add a list of concepts given an id and name\n     * @param {object|object[]}   concepts       Can be a single media object or an array of media objects\n     *   @param  {object|string}    concepts[].concept         If string, this is assumed to be the concept id. Otherwise, an object with the following attributes\n     *     @param  {object}           concepts[].concept.id      The new concept's id (Required)\n     *     @param  {object}           concepts[].concept.name    The new concept's name\n     * @return {Promise(Concepts, error)}             A Promise that is fulfilled with a Concepts instance or rejected with an error\n     */\n\n  }, {\n    key: 'create',\n    value: function create() {\n      var _this4 = this;\n\n      var concepts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (checkType(/(Object|String)/, concepts)) {\n        concepts = [concepts];\n      }\n      var data = {\n        'concepts': concepts.map(formatConcept)\n      };\n      var url = '' + this._config.basePath + CONCEPTS_PATH;\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.post(url, data, { headers: headers }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Concepts(_this4._config, response.data.concepts));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Search for a concept given a name. A wildcard can be given (example: The name \"bo*\" will match with \"boat\" and \"bow\" given those concepts exist\n     * @param  {string}   name  The name of the concept to search for\n     * @return {Promise(Concepts, error)} A Promise that is fulfilled with a Concepts instance or rejected with an error\n     */\n\n  }, {\n    key: 'search',\n    value: function search(name) {\n      var _this5 = this;\n\n      var language = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      var url = '' + this._config.basePath + CONCEPT_SEARCH_PATH;\n      return wrapToken(this._config, function (headers) {\n        var params = {\n          'concept_query': { name: name, language: language }\n        };\n        return new Promise(function (resolve, reject) {\n          axios.post(url, params, { headers: headers }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Concepts(_this5._config, response.data.concepts));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n\n    /**\n     * Update a concepts\n     * @param {object|object[]}   concepts       Can be a single concept object or an array of concept objects\n     *   @param  {object}           concepts[].concept         A concept object with the following attributes\n     *     @param  {object}           concepts[].concept.id      The concept's id (Required)\n     *     @param  {object}           concepts[].concept.name    The concept's new name\n     * @param {string}            [action=overwrite]  The action to use for the PATCH\n     * @return {Promise(Concepts, error)}             A Promise that is fulfilled with a Concepts instance or rejected with an error\n     */\n\n  }, {\n    key: 'update',\n    value: function update() {\n      var _this6 = this;\n\n      var concepts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'overwrite';\n\n      if (!checkType(/Array/, concepts)) {\n        concepts = [concepts];\n      }\n      var data = {\n        concepts: concepts,\n        action: action\n      };\n      var url = '' + this._config.basePath + CONCEPTS_PATH;\n      return wrapToken(this._config, function (headers) {\n        return new Promise(function (resolve, reject) {\n          axios.patch(url, data, { headers: headers }).then(function (response) {\n            if (isSuccess(response)) {\n              resolve(new Concepts(_this6._config, response.data.concepts));\n            } else {\n              reject(response);\n            }\n          }, reject);\n        });\n      });\n    }\n  }]);\n\n  return Concepts;\n}();\n\n;\n\nmodule.exports = Concepts;"]},"metadata":{},"sourceType":"script"}