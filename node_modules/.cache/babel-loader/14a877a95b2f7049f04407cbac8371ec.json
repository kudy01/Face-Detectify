{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbsorberInstance = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nclass AbsorberInstance {\n  constructor(absorbers, container, options, position) {\n    var _a, _b;\n\n    this.absorbers = absorbers;\n    this.container = container;\n    this.initialPosition = position;\n    this.options = options;\n    this.dragging = false;\n    let size = options.size.value * container.retina.pixelRatio;\n    const random = typeof options.size.random === \"boolean\" ? options.size.random : options.size.random.enable;\n    const minSize = typeof options.size.random === \"boolean\" ? 1 : options.size.random.minimumValue;\n\n    if (random) {\n      size = Utils_1.Utils.randomInRange(minSize, size);\n    }\n\n    this.opacity = this.options.opacity;\n    this.size = size * container.retina.pixelRatio;\n    this.mass = this.size * options.size.density;\n    const limit = options.size.limit;\n    this.limit = limit !== undefined ? limit * container.retina.pixelRatio : limit;\n    const color = typeof options.color === \"string\" ? {\n      value: options.color\n    } : options.color;\n    this.color = (_a = Utils_1.ColorUtils.colorToRgb(color)) !== null && _a !== void 0 ? _a : {\n      b: 0,\n      g: 0,\n      r: 0\n    };\n    this.position = (_b = this.initialPosition) !== null && _b !== void 0 ? _b : this.calcPosition();\n  }\n\n  attract(particle) {\n    const options = this.options;\n\n    if (options.draggable) {\n      const mouse = this.container.interactivity.mouse;\n\n      if (mouse.clicking && mouse.downPosition) {\n        const mouseDist = Utils_1.Utils.getDistance(this.position, mouse.downPosition);\n\n        if (mouseDist <= this.size) {\n          this.dragging = true;\n        }\n      } else {\n        this.dragging = false;\n      }\n\n      if (this.dragging && mouse.position) {\n        this.position.x = mouse.position.x;\n        this.position.y = mouse.position.y;\n      }\n    }\n\n    const pos = particle.getPosition();\n    const {\n      dx,\n      dy,\n      distance\n    } = Utils_1.Utils.getDistances(this.position, pos);\n    const angle = Math.atan2(dx, dy);\n    const acceleration = this.mass / Math.pow(distance, 2);\n\n    if (distance < this.size + particle.size.value) {\n      const sizeFactor = particle.size.value * 0.033 * this.container.retina.pixelRatio;\n\n      if (this.size > particle.size.value && distance < this.size - particle.size.value) {\n        if (options.destroy) {\n          particle.destroy();\n        } else {\n          particle.needsNewPosition = true;\n          this.updateParticlePosition(particle, angle, acceleration);\n        }\n      } else {\n        if (options.destroy) {\n          particle.size.value -= sizeFactor;\n        }\n\n        this.updateParticlePosition(particle, angle, acceleration);\n      }\n\n      if (this.limit === undefined || this.size < this.limit) {\n        this.size += sizeFactor;\n      }\n\n      this.mass += sizeFactor * this.options.size.density;\n    } else {\n      this.updateParticlePosition(particle, angle, acceleration);\n    }\n  }\n\n  resize() {\n    const initialPosition = this.initialPosition;\n    this.position = initialPosition && Utils_1.Utils.isPointInside(initialPosition, this.container.canvas.size) ? initialPosition : this.calcPosition();\n  }\n\n  draw(context) {\n    context.translate(this.position.x, this.position.y);\n    context.beginPath();\n    context.arc(0, 0, this.size, 0, Math.PI * 2, false);\n    context.closePath();\n    context.fillStyle = Utils_1.ColorUtils.getStyleFromRgb(this.color, this.opacity);\n    context.fill();\n  }\n\n  calcPosition() {\n    var _a;\n\n    const container = this.container;\n    const percentPosition = (_a = this.options.position) !== null && _a !== void 0 ? _a : {\n      x: Math.random() * 100,\n      y: Math.random() * 100\n    };\n    return {\n      x: percentPosition.x / 100 * container.canvas.size.width,\n      y: percentPosition.y / 100 * container.canvas.size.height\n    };\n  }\n\n  updateParticlePosition(particle, angle, acceleration) {\n    var _a;\n\n    if (particle.destroyed) {\n      return;\n    }\n\n    const canvasSize = this.container.canvas.size;\n\n    if (particle.needsNewPosition) {\n      const pSize = particle.size.value;\n      particle.position.x = Math.random() * (canvasSize.width - pSize * 2) + pSize;\n      particle.position.y = Math.random() * (canvasSize.height - pSize * 2) + pSize;\n      particle.needsNewPosition = false;\n    }\n\n    if (this.options.orbits) {\n      if (particle.orbitRadius === undefined) {\n        particle.orbitRadius = Utils_1.Utils.getDistance(particle.getPosition(), this.position);\n      }\n\n      if (particle.orbitRadius <= this.size && !this.options.destroy) {\n        particle.orbitRadius = Math.random() * Math.max(canvasSize.width, canvasSize.height);\n      }\n\n      if (particle.orbitAngle === undefined) {\n        particle.orbitAngle = Math.random() * Math.PI * 2;\n      }\n\n      const orbitRadius = particle.orbitRadius;\n      const orbitAngle = particle.orbitAngle;\n      particle.velocity.horizontal = 0;\n      particle.velocity.vertical = 0;\n      particle.position.x = this.position.x + orbitRadius * Math.cos(orbitAngle);\n      particle.position.y = this.position.y + orbitRadius * Math.sin(orbitAngle);\n      particle.orbitRadius -= acceleration;\n      particle.orbitAngle += ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : this.container.retina.moveSpeed) / 100;\n    } else {\n      particle.velocity.horizontal += Math.sin(angle) * acceleration;\n      particle.velocity.vertical += Math.cos(angle) * acceleration;\n    }\n  }\n\n}\n\nexports.AbsorberInstance = AbsorberInstance;","map":{"version":3,"sources":["/Users/kudy/Desktop/Face-Detectify/node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js"],"names":["Object","defineProperty","exports","value","AbsorberInstance","Utils_1","require","constructor","absorbers","container","options","position","_a","_b","initialPosition","dragging","size","retina","pixelRatio","random","enable","minSize","minimumValue","Utils","randomInRange","opacity","mass","density","limit","undefined","color","ColorUtils","colorToRgb","b","g","r","calcPosition","attract","particle","draggable","mouse","interactivity","clicking","downPosition","mouseDist","getDistance","x","y","pos","getPosition","dx","dy","distance","getDistances","angle","Math","atan2","acceleration","pow","sizeFactor","destroy","needsNewPosition","updateParticlePosition","resize","isPointInside","canvas","draw","context","translate","beginPath","arc","PI","closePath","fillStyle","getStyleFromRgb","fill","percentPosition","width","height","destroyed","canvasSize","pSize","orbits","orbitRadius","max","orbitAngle","velocity","horizontal","vertical","cos","sin","moveSpeed"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AbsorberInstance = void 0;\nconst Utils_1 = require(\"../../Utils\");\nclass AbsorberInstance {\n    constructor(absorbers, container, options, position) {\n        var _a, _b;\n        this.absorbers = absorbers;\n        this.container = container;\n        this.initialPosition = position;\n        this.options = options;\n        this.dragging = false;\n        let size = options.size.value * container.retina.pixelRatio;\n        const random = typeof options.size.random === \"boolean\" ? options.size.random : options.size.random.enable;\n        const minSize = typeof options.size.random === \"boolean\" ? 1 : options.size.random.minimumValue;\n        if (random) {\n            size = Utils_1.Utils.randomInRange(minSize, size);\n        }\n        this.opacity = this.options.opacity;\n        this.size = size * container.retina.pixelRatio;\n        this.mass = this.size * options.size.density;\n        const limit = options.size.limit;\n        this.limit = limit !== undefined ? limit * container.retina.pixelRatio : limit;\n        const color = typeof options.color === \"string\" ? { value: options.color } : options.color;\n        this.color = (_a = Utils_1.ColorUtils.colorToRgb(color)) !== null && _a !== void 0 ? _a : {\n            b: 0,\n            g: 0,\n            r: 0,\n        };\n        this.position = (_b = this.initialPosition) !== null && _b !== void 0 ? _b : this.calcPosition();\n    }\n    attract(particle) {\n        const options = this.options;\n        if (options.draggable) {\n            const mouse = this.container.interactivity.mouse;\n            if (mouse.clicking && mouse.downPosition) {\n                const mouseDist = Utils_1.Utils.getDistance(this.position, mouse.downPosition);\n                if (mouseDist <= this.size) {\n                    this.dragging = true;\n                }\n            }\n            else {\n                this.dragging = false;\n            }\n            if (this.dragging && mouse.position) {\n                this.position.x = mouse.position.x;\n                this.position.y = mouse.position.y;\n            }\n        }\n        const pos = particle.getPosition();\n        const { dx, dy, distance } = Utils_1.Utils.getDistances(this.position, pos);\n        const angle = Math.atan2(dx, dy);\n        const acceleration = this.mass / Math.pow(distance, 2);\n        if (distance < this.size + particle.size.value) {\n            const sizeFactor = particle.size.value * 0.033 * this.container.retina.pixelRatio;\n            if (this.size > particle.size.value && distance < this.size - particle.size.value) {\n                if (options.destroy) {\n                    particle.destroy();\n                }\n                else {\n                    particle.needsNewPosition = true;\n                    this.updateParticlePosition(particle, angle, acceleration);\n                }\n            }\n            else {\n                if (options.destroy) {\n                    particle.size.value -= sizeFactor;\n                }\n                this.updateParticlePosition(particle, angle, acceleration);\n            }\n            if (this.limit === undefined || this.size < this.limit) {\n                this.size += sizeFactor;\n            }\n            this.mass += sizeFactor * this.options.size.density;\n        }\n        else {\n            this.updateParticlePosition(particle, angle, acceleration);\n        }\n    }\n    resize() {\n        const initialPosition = this.initialPosition;\n        this.position =\n            initialPosition && Utils_1.Utils.isPointInside(initialPosition, this.container.canvas.size)\n                ? initialPosition\n                : this.calcPosition();\n    }\n    draw(context) {\n        context.translate(this.position.x, this.position.y);\n        context.beginPath();\n        context.arc(0, 0, this.size, 0, Math.PI * 2, false);\n        context.closePath();\n        context.fillStyle = Utils_1.ColorUtils.getStyleFromRgb(this.color, this.opacity);\n        context.fill();\n    }\n    calcPosition() {\n        var _a;\n        const container = this.container;\n        const percentPosition = (_a = this.options.position) !== null && _a !== void 0 ? _a : {\n            x: Math.random() * 100,\n            y: Math.random() * 100,\n        };\n        return {\n            x: (percentPosition.x / 100) * container.canvas.size.width,\n            y: (percentPosition.y / 100) * container.canvas.size.height,\n        };\n    }\n    updateParticlePosition(particle, angle, acceleration) {\n        var _a;\n        if (particle.destroyed) {\n            return;\n        }\n        const canvasSize = this.container.canvas.size;\n        if (particle.needsNewPosition) {\n            const pSize = particle.size.value;\n            particle.position.x = Math.random() * (canvasSize.width - pSize * 2) + pSize;\n            particle.position.y = Math.random() * (canvasSize.height - pSize * 2) + pSize;\n            particle.needsNewPosition = false;\n        }\n        if (this.options.orbits) {\n            if (particle.orbitRadius === undefined) {\n                particle.orbitRadius = Utils_1.Utils.getDistance(particle.getPosition(), this.position);\n            }\n            if (particle.orbitRadius <= this.size && !this.options.destroy) {\n                particle.orbitRadius = Math.random() * Math.max(canvasSize.width, canvasSize.height);\n            }\n            if (particle.orbitAngle === undefined) {\n                particle.orbitAngle = Math.random() * Math.PI * 2;\n            }\n            const orbitRadius = particle.orbitRadius;\n            const orbitAngle = particle.orbitAngle;\n            particle.velocity.horizontal = 0;\n            particle.velocity.vertical = 0;\n            particle.position.x = this.position.x + orbitRadius * Math.cos(orbitAngle);\n            particle.position.y = this.position.y + orbitRadius * Math.sin(orbitAngle);\n            particle.orbitRadius -= acceleration;\n            particle.orbitAngle += ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : this.container.retina.moveSpeed) / 100;\n        }\n        else {\n            particle.velocity.horizontal += Math.sin(angle) * acceleration;\n            particle.velocity.vertical += Math.cos(angle) * acceleration;\n        }\n    }\n}\nexports.AbsorberInstance = AbsorberInstance;\n"]},"metadata":{},"sourceType":"script"}