{"ast":null,"code":"\"use strict\"; // rawAsap provides everything we need except exception management.\n\nvar rawAsap = require(\"./raw\"); // RawTasks are recycled to reduce GC churn.\n\n\nvar freeTasks = []; // We queue errors to ensure they are thrown in right order (FIFO).\n// Array-as-queue is good enough here, since we are just dealing with exceptions.\n\nvar pendingErrors = [];\nvar requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);\n\nfunction throwFirstError() {\n  if (pendingErrors.length) {\n    throw pendingErrors.shift();\n  }\n}\n/**\n * Calls a task as soon as possible after returning, in its own event, with priority\n * over other events like animation, reflow, and repaint. An error thrown from an\n * event will not interrupt, nor even substantially slow down the processing of\n * other events, but will be rather postponed to a lower priority event.\n * @param {{call}} task A callable object, typically a function that takes no\n * arguments.\n */\n\n\nmodule.exports = asap;\n\nfunction asap(task) {\n  var rawTask;\n\n  if (freeTasks.length) {\n    rawTask = freeTasks.pop();\n  } else {\n    rawTask = new RawTask();\n  }\n\n  rawTask.task = task;\n  rawAsap(rawTask);\n} // We wrap tasks with recyclable task objects.  A task object implements\n// `call`, just like a function.\n\n\nfunction RawTask() {\n  this.task = null;\n} // The sole purpose of wrapping the task is to catch the exception and recycle\n// the task object after its single use.\n\n\nRawTask.prototype.call = function () {\n  try {\n    this.task.call();\n  } catch (error) {\n    if (asap.onerror) {\n      // This hook exists purely for testing purposes.\n      // Its name will be periodically randomized to break any code that\n      // depends on its existence.\n      asap.onerror(error);\n    } else {\n      // In a web browser, exceptions are not fatal. However, to avoid\n      // slowing down the queue of pending tasks, we rethrow the error in a\n      // lower priority turn.\n      pendingErrors.push(error);\n      requestErrorThrow();\n    }\n  } finally {\n    this.task = null;\n    freeTasks[freeTasks.length] = this;\n  }\n};","map":{"version":3,"sources":["/Users/kudy/Desktop/Face-Detectify/node_modules/asap/browser-asap.js"],"names":["rawAsap","require","freeTasks","pendingErrors","requestErrorThrow","makeRequestCallFromTimer","throwFirstError","length","shift","module","exports","asap","task","rawTask","pop","RawTask","prototype","call","error","onerror","push"],"mappings":"AAAA,a,CAEA;;AACA,IAAIA,OAAO,GAAGC,OAAO,CAAC,OAAD,CAArB,C,CACA;;;AACA,IAAIC,SAAS,GAAG,EAAhB,C,CACA;AACA;;AACA,IAAIC,aAAa,GAAG,EAApB;AACA,IAAIC,iBAAiB,GAAGJ,OAAO,CAACK,wBAAR,CAAiCC,eAAjC,CAAxB;;AAEA,SAASA,eAAT,GAA2B;AACvB,MAAIH,aAAa,CAACI,MAAlB,EAA0B;AACtB,UAAMJ,aAAa,CAACK,KAAd,EAAN;AACH;AACJ;AAED;;;;;;;;;;AAQAC,MAAM,CAACC,OAAP,GAAiBC,IAAjB;;AACA,SAASA,IAAT,CAAcC,IAAd,EAAoB;AAChB,MAAIC,OAAJ;;AACA,MAAIX,SAAS,CAACK,MAAd,EAAsB;AAClBM,IAAAA,OAAO,GAAGX,SAAS,CAACY,GAAV,EAAV;AACH,GAFD,MAEO;AACHD,IAAAA,OAAO,GAAG,IAAIE,OAAJ,EAAV;AACH;;AACDF,EAAAA,OAAO,CAACD,IAAR,GAAeA,IAAf;AACAZ,EAAAA,OAAO,CAACa,OAAD,CAAP;AACH,C,CAED;AACA;;;AACA,SAASE,OAAT,GAAmB;AACf,OAAKH,IAAL,GAAY,IAAZ;AACH,C,CAED;AACA;;;AACAG,OAAO,CAACC,SAAR,CAAkBC,IAAlB,GAAyB,YAAY;AACjC,MAAI;AACA,SAAKL,IAAL,CAAUK,IAAV;AACH,GAFD,CAEE,OAAOC,KAAP,EAAc;AACZ,QAAIP,IAAI,CAACQ,OAAT,EAAkB;AACd;AACA;AACA;AACAR,MAAAA,IAAI,CAACQ,OAAL,CAAaD,KAAb;AACH,KALD,MAKO;AACH;AACA;AACA;AACAf,MAAAA,aAAa,CAACiB,IAAd,CAAmBF,KAAnB;AACAd,MAAAA,iBAAiB;AACpB;AACJ,GAfD,SAeU;AACN,SAAKQ,IAAL,GAAY,IAAZ;AACAV,IAAAA,SAAS,CAACA,SAAS,CAACK,MAAX,CAAT,GAA8B,IAA9B;AACH;AACJ,CApBD","sourcesContent":["\"use strict\";\n\n// rawAsap provides everything we need except exception management.\nvar rawAsap = require(\"./raw\");\n// RawTasks are recycled to reduce GC churn.\nvar freeTasks = [];\n// We queue errors to ensure they are thrown in right order (FIFO).\n// Array-as-queue is good enough here, since we are just dealing with exceptions.\nvar pendingErrors = [];\nvar requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);\n\nfunction throwFirstError() {\n    if (pendingErrors.length) {\n        throw pendingErrors.shift();\n    }\n}\n\n/**\n * Calls a task as soon as possible after returning, in its own event, with priority\n * over other events like animation, reflow, and repaint. An error thrown from an\n * event will not interrupt, nor even substantially slow down the processing of\n * other events, but will be rather postponed to a lower priority event.\n * @param {{call}} task A callable object, typically a function that takes no\n * arguments.\n */\nmodule.exports = asap;\nfunction asap(task) {\n    var rawTask;\n    if (freeTasks.length) {\n        rawTask = freeTasks.pop();\n    } else {\n        rawTask = new RawTask();\n    }\n    rawTask.task = task;\n    rawAsap(rawTask);\n}\n\n// We wrap tasks with recyclable task objects.  A task object implements\n// `call`, just like a function.\nfunction RawTask() {\n    this.task = null;\n}\n\n// The sole purpose of wrapping the task is to catch the exception and recycle\n// the task object after its single use.\nRawTask.prototype.call = function () {\n    try {\n        this.task.call();\n    } catch (error) {\n        if (asap.onerror) {\n            // This hook exists purely for testing purposes.\n            // Its name will be periodically randomized to break any code that\n            // depends on its existence.\n            asap.onerror(error);\n        } else {\n            // In a web browser, exceptions are not fatal. However, to avoid\n            // slowing down the queue of pending tasks, we rethrow the error in a\n            // lower priority turn.\n            pendingErrors.push(error);\n            requestErrorThrow();\n        }\n    } finally {\n        this.task = null;\n        freeTasks[freeTasks.length] = this;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}