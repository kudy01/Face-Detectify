"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Updater = void 0;
const Utils_1 = require("../../Utils");
const Enums_1 = require("../../Enums");
class Updater {
    constructor(container, particle) {
        this.container = container;
        this.particle = particle;
    }
    update(delta) {
        if (this.particle.destroyed) {
            return;
        }
        this.updateOpacity(delta);
        this.updateSize(delta);
        this.updateAngle(delta);
        this.updateColor(delta);
        this.updateStrokeColor(delta);
        this.updateOutMode(delta);
    }
    updateOpacity(delta) {
        const particle = this.particle;
        if (particle.particlesOptions.opacity.animation.enable) {
            switch (particle.opacity.status) {
                case Enums_1.OpacityAnimationStatus.increasing:
                    if (particle.opacity.value >= particle.particlesOptions.opacity.value) {
                        particle.opacity.status = Enums_1.OpacityAnimationStatus.decreasing;
                    }
                    else {
                        particle.opacity.value += (particle.opacity.velocity || 0) * delta.factor;
                    }
                    break;
                case Enums_1.OpacityAnimationStatus.decreasing:
                    if (particle.opacity.value <= particle.particlesOptions.opacity.animation.minimumValue) {
                        particle.opacity.status = Enums_1.OpacityAnimationStatus.increasing;
                    }
                    else {
                        particle.opacity.value -= (particle.opacity.velocity || 0) * delta.factor;
                    }
                    break;
            }
            if (particle.opacity.value < 0) {
                particle.opacity.value = 0;
            }
        }
    }
    updateSize(delta) {
        var _a;
        const container = this.container;
        const particle = this.particle;
        const sizeOpt = particle.particlesOptions.size;
        const sizeAnim = sizeOpt.animation;
        if (sizeAnim.enable) {
            switch (particle.size.status) {
                case Enums_1.SizeAnimationStatus.increasing:
                    if (particle.size.value >= ((_a = particle.sizeValue) !== null && _a !== void 0 ? _a : container.retina.sizeValue)) {
                        particle.size.status = Enums_1.SizeAnimationStatus.decreasing;
                    }
                    else {
                        particle.size.value += (particle.size.velocity || 0) * delta.factor;
                    }
                    break;
                case Enums_1.SizeAnimationStatus.decreasing:
                    if (particle.size.value <= sizeAnim.minimumValue) {
                        particle.size.status = Enums_1.SizeAnimationStatus.increasing;
                    }
                    else {
                        particle.size.value -= (particle.size.velocity || 0) * delta.factor;
                    }
            }
            switch (sizeAnim.destroy) {
                case Enums_1.DestroyType.max:
                    if (particle.size.value >= sizeOpt.value * container.retina.pixelRatio) {
                        particle.destroy();
                    }
                    break;
                case Enums_1.DestroyType.min:
                    if (particle.size.value <= sizeAnim.minimumValue * container.retina.pixelRatio) {
                        particle.destroy();
                    }
                    break;
            }
            if (particle.size.value < 0 && !particle.destroyed) {
                particle.size.value = 0;
            }
        }
    }
    updateAngle(delta) {
        const particle = this.particle;
        const rotate = particle.particlesOptions.rotate;
        const rotateAnimation = rotate.animation;
        const speed = (rotateAnimation.speed / 360) * delta.factor;
        const max = 2 * Math.PI;
        if (rotate.path) {
            particle.pathAngle = Math.atan2(particle.velocity.vertical, particle.velocity.horizontal);
        }
        else {
            if (rotateAnimation.enable) {
                switch (particle.rotateDirection) {
                    case Enums_1.RotateDirection.clockwise:
                        particle.angle += speed;
                        if (particle.angle > max) {
                            particle.angle -= max;
                        }
                        break;
                    case Enums_1.RotateDirection.counterClockwise:
                    default:
                        particle.angle -= speed;
                        if (particle.angle < 0) {
                            particle.angle += max;
                        }
                        break;
                }
            }
        }
    }
    updateColor(delta) {
        const particle = this.particle;
        if (particle.color === undefined) {
            return;
        }
        if (particle.particlesOptions.color.animation.enable) {
            particle.color.h += (particle.colorVelocity || 0) * delta.factor;
            if (particle.color.h > 360) {
                particle.color.h -= 360;
            }
        }
    }
    updateStrokeColor(delta) {
        const particle = this.particle;
        const color = particle.stroke.color;
        if (typeof color === "string" || color === undefined) {
            return;
        }
        if (particle.strokeColor === undefined) {
            return;
        }
        if (color.animation.enable) {
            particle.strokeColor.h += (particle.colorVelocity || 0) * delta.factor;
            if (particle.strokeColor.h > 360) {
                particle.strokeColor.h -= 360;
            }
        }
    }
    fixOutOfCanvasPosition() {
        const container = this.container;
        const particle = this.particle;
        const wrap = particle.particlesOptions.move.warp;
        const canvasSize = container.canvas.size;
        const newPos = {
            bottom: canvasSize.height + particle.size.value - particle.offset.y,
            left: -particle.size.value - particle.offset.x,
            right: canvasSize.width + particle.size.value + particle.offset.x,
            top: -particle.size.value - particle.offset.y,
        };
        const sizeValue = particle.size.value;
        const nextBounds = Utils_1.Utils.calculateBounds(particle.position, sizeValue);
        if (nextBounds.left > canvasSize.width - particle.offset.x) {
            particle.position.x = newPos.left;
            if (!wrap) {
                particle.position.y = Math.random() * canvasSize.height;
            }
        }
        else if (nextBounds.right < -particle.offset.x) {
            particle.position.x = newPos.right;
            if (!wrap) {
                particle.position.y = Math.random() * canvasSize.height;
            }
        }
        if (nextBounds.top > canvasSize.height - particle.offset.y) {
            if (!wrap) {
                particle.position.x = Math.random() * canvasSize.width;
            }
            particle.position.y = newPos.top;
        }
        else if (nextBounds.bottom < -particle.offset.y) {
            if (!wrap) {
                particle.position.x = Math.random() * canvasSize.width;
            }
            particle.position.y = newPos.bottom;
        }
    }
    updateOutMode(delta) {
        const container = this.container;
        const particle = this.particle;
        switch (particle.particlesOptions.move.outMode) {
            case Enums_1.OutMode.bounce:
            case Enums_1.OutMode.bounceVertical:
            case Enums_1.OutMode.bounceHorizontal:
                this.updateBounce(delta);
                break;
            case Enums_1.OutMode.destroy:
                if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.size.value)) {
                    particle.destroy();
                    container.particles.remove(particle);
                    return;
                }
                break;
            case Enums_1.OutMode.out:
                if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.size.value)) {
                    this.fixOutOfCanvasPosition();
                }
        }
    }
    updateBounce(delta) {
        const container = this.container;
        const particle = this.particle;
        let handled = false;
        for (const [, plugin] of container.plugins) {
            if (plugin.particleBounce !== undefined) {
                handled = plugin.particleBounce(particle, delta);
            }
            if (handled) {
                break;
            }
        }
        if (handled) {
            return;
        }
        const outMode = particle.particlesOptions.move.outMode, pos = particle.getPosition(), offset = particle.offset, size = particle.size.value, bounds = Utils_1.Utils.calculateBounds(pos, size), canvasSize = container.canvas.size;
        if (outMode === Enums_1.OutMode.bounce || outMode === Enums_1.OutMode.bounceHorizontal) {
            const velocity = particle.velocity.horizontal;
            if ((bounds.right >= canvasSize.width && velocity > 0) || (bounds.left <= 0 && velocity < 0)) {
                particle.velocity.horizontal *= -1;
            }
            const minPos = offset.x + size;
            if (bounds.right >= canvasSize.width) {
                particle.position.x = canvasSize.width - minPos;
            }
            else if (bounds.left <= 0) {
                particle.position.x = minPos;
            }
        }
        if (outMode === Enums_1.OutMode.bounce || outMode === Enums_1.OutMode.bounceVertical) {
            const velocity = particle.velocity.vertical;
            if ((bounds.bottom >= container.canvas.size.height && velocity > 0) || (bounds.top <= 0 && velocity < 0)) {
                particle.velocity.vertical *= -1;
            }
            const minPos = offset.y + size;
            if (bounds.bottom >= canvasSize.height) {
                particle.position.y = canvasSize.height - minPos;
            }
            else if (bounds.top <= 0) {
                particle.position.y = minPos;
            }
        }
    }
}
exports.Updater = Updater;
